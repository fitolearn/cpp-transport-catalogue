// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_graph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_graph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_graph_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_graph_2eproto;
namespace tc_serialize {
class AllRoutesList;
struct AllRoutesListDefaultTypeInternal;
extern AllRoutesListDefaultTypeInternal _AllRoutesList_default_instance_;
class BaseSettings;
struct BaseSettingsDefaultTypeInternal;
extern BaseSettingsDefaultTypeInternal _BaseSettings_default_instance_;
class BusRoute;
struct BusRouteDefaultTypeInternal;
extern BusRouteDefaultTypeInternal _BusRoute_default_instance_;
class Coordinates;
struct CoordinatesDefaultTypeInternal;
extern CoordinatesDefaultTypeInternal _Coordinates_default_instance_;
class DistanceBetweenStops;
struct DistanceBetweenStopsDefaultTypeInternal;
extern DistanceBetweenStopsDefaultTypeInternal _DistanceBetweenStops_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class StopDistanceIndex;
struct StopDistanceIndexDefaultTypeInternal;
extern StopDistanceIndexDefaultTypeInternal _StopDistanceIndex_default_instance_;
class StopsList;
struct StopsListDefaultTypeInternal;
extern StopsListDefaultTypeInternal _StopsList_default_instance_;
}  // namespace tc_serialize
PROTOBUF_NAMESPACE_OPEN
template<> ::tc_serialize::AllRoutesList* Arena::CreateMaybeMessage<::tc_serialize::AllRoutesList>(Arena*);
template<> ::tc_serialize::BaseSettings* Arena::CreateMaybeMessage<::tc_serialize::BaseSettings>(Arena*);
template<> ::tc_serialize::BusRoute* Arena::CreateMaybeMessage<::tc_serialize::BusRoute>(Arena*);
template<> ::tc_serialize::Coordinates* Arena::CreateMaybeMessage<::tc_serialize::Coordinates>(Arena*);
template<> ::tc_serialize::DistanceBetweenStops* Arena::CreateMaybeMessage<::tc_serialize::DistanceBetweenStops>(Arena*);
template<> ::tc_serialize::Stop* Arena::CreateMaybeMessage<::tc_serialize::Stop>(Arena*);
template<> ::tc_serialize::StopDistanceIndex* Arena::CreateMaybeMessage<::tc_serialize::StopDistanceIndex>(Arena*);
template<> ::tc_serialize::StopsList* Arena::CreateMaybeMessage<::tc_serialize::StopsList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tc_serialize {

// ===================================================================

class Coordinates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.Coordinates) */ {
 public:
  inline Coordinates() : Coordinates(nullptr) {}
  ~Coordinates() override;
  explicit PROTOBUF_CONSTEXPR Coordinates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coordinates(const Coordinates& from);
  Coordinates(Coordinates&& from) noexcept
    : Coordinates() {
    *this = ::std::move(from);
  }

  inline Coordinates& operator=(const Coordinates& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinates& operator=(Coordinates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coordinates& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coordinates* internal_default_instance() {
    return reinterpret_cast<const Coordinates*>(
               &_Coordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Coordinates& a, Coordinates& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinates* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coordinates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coordinates>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coordinates& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Coordinates& from) {
    Coordinates::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinates* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.Coordinates";
  }
  protected:
  explicit Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
  };
  // double latitude = 1;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 2;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:tc_serialize.Coordinates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double latitude_;
    double longitude_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class Stop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  ~Stop() override;
  explicit PROTOBUF_CONSTEXPR Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stop& from) {
    Stop::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kCoordsFieldNumber = 3,
    kIdStopFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .tc_serialize.Coordinates coords = 3;
  bool has_coords() const;
  private:
  bool _internal_has_coords() const;
  public:
  void clear_coords();
  const ::tc_serialize::Coordinates& coords() const;
  PROTOBUF_NODISCARD ::tc_serialize::Coordinates* release_coords();
  ::tc_serialize::Coordinates* mutable_coords();
  void set_allocated_coords(::tc_serialize::Coordinates* coords);
  private:
  const ::tc_serialize::Coordinates& _internal_coords() const;
  ::tc_serialize::Coordinates* _internal_mutable_coords();
  public:
  void unsafe_arena_set_allocated_coords(
      ::tc_serialize::Coordinates* coords);
  ::tc_serialize::Coordinates* unsafe_arena_release_coords();

  // uint32 id_stop = 1;
  void clear_id_stop();
  uint32_t id_stop() const;
  void set_id_stop(uint32_t value);
  private:
  uint32_t _internal_id_stop() const;
  void _internal_set_id_stop(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tc_serialize.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::tc_serialize::Coordinates* coords_;
    uint32_t id_stop_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class StopsList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.StopsList) */ {
 public:
  inline StopsList() : StopsList(nullptr) {}
  ~StopsList() override;
  explicit PROTOBUF_CONSTEXPR StopsList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopsList(const StopsList& from);
  StopsList(StopsList&& from) noexcept
    : StopsList() {
    *this = ::std::move(from);
  }

  inline StopsList& operator=(const StopsList& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopsList& operator=(StopsList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopsList& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopsList* internal_default_instance() {
    return reinterpret_cast<const StopsList*>(
               &_StopsList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StopsList& a, StopsList& b) {
    a.Swap(&b);
  }
  inline void Swap(StopsList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopsList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopsList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopsList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopsList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopsList& from) {
    StopsList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopsList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.StopsList";
  }
  protected:
  explicit StopsList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllStopsFieldNumber = 1,
  };
  // repeated .tc_serialize.Stop all_stops = 1;
  int all_stops_size() const;
  private:
  int _internal_all_stops_size() const;
  public:
  void clear_all_stops();
  ::tc_serialize::Stop* mutable_all_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Stop >*
      mutable_all_stops();
  private:
  const ::tc_serialize::Stop& _internal_all_stops(int index) const;
  ::tc_serialize::Stop* _internal_add_all_stops();
  public:
  const ::tc_serialize::Stop& all_stops(int index) const;
  ::tc_serialize::Stop* add_all_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Stop >&
      all_stops() const;

  // @@protoc_insertion_point(class_scope:tc_serialize.StopsList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Stop > all_stops_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class DistanceBetweenStops final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.DistanceBetweenStops) */ {
 public:
  inline DistanceBetweenStops() : DistanceBetweenStops(nullptr) {}
  ~DistanceBetweenStops() override;
  explicit PROTOBUF_CONSTEXPR DistanceBetweenStops(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DistanceBetweenStops(const DistanceBetweenStops& from);
  DistanceBetweenStops(DistanceBetweenStops&& from) noexcept
    : DistanceBetweenStops() {
    *this = ::std::move(from);
  }

  inline DistanceBetweenStops& operator=(const DistanceBetweenStops& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistanceBetweenStops& operator=(DistanceBetweenStops&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DistanceBetweenStops& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistanceBetweenStops* internal_default_instance() {
    return reinterpret_cast<const DistanceBetweenStops*>(
               &_DistanceBetweenStops_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DistanceBetweenStops& a, DistanceBetweenStops& b) {
    a.Swap(&b);
  }
  inline void Swap(DistanceBetweenStops* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistanceBetweenStops* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistanceBetweenStops* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DistanceBetweenStops>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DistanceBetweenStops& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DistanceBetweenStops& from) {
    DistanceBetweenStops::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistanceBetweenStops* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.DistanceBetweenStops";
  }
  protected:
  explicit DistanceBetweenStops(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromIdFieldNumber = 1,
    kToIdFieldNumber = 2,
    kDistanceFieldNumber = 3,
  };
  // uint32 from_id = 1;
  void clear_from_id();
  uint32_t from_id() const;
  void set_from_id(uint32_t value);
  private:
  uint32_t _internal_from_id() const;
  void _internal_set_from_id(uint32_t value);
  public:

  // uint32 to_id = 2;
  void clear_to_id();
  uint32_t to_id() const;
  void set_to_id(uint32_t value);
  private:
  uint32_t _internal_to_id() const;
  void _internal_set_to_id(uint32_t value);
  public:

  // uint64 distance = 3;
  void clear_distance();
  uint64_t distance() const;
  void set_distance(uint64_t value);
  private:
  uint64_t _internal_distance() const;
  void _internal_set_distance(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tc_serialize.DistanceBetweenStops)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t from_id_;
    uint32_t to_id_;
    uint64_t distance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class StopDistanceIndex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.StopDistanceIndex) */ {
 public:
  inline StopDistanceIndex() : StopDistanceIndex(nullptr) {}
  ~StopDistanceIndex() override;
  explicit PROTOBUF_CONSTEXPR StopDistanceIndex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopDistanceIndex(const StopDistanceIndex& from);
  StopDistanceIndex(StopDistanceIndex&& from) noexcept
    : StopDistanceIndex() {
    *this = ::std::move(from);
  }

  inline StopDistanceIndex& operator=(const StopDistanceIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopDistanceIndex& operator=(StopDistanceIndex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopDistanceIndex& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopDistanceIndex* internal_default_instance() {
    return reinterpret_cast<const StopDistanceIndex*>(
               &_StopDistanceIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StopDistanceIndex& a, StopDistanceIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(StopDistanceIndex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopDistanceIndex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopDistanceIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopDistanceIndex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopDistanceIndex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopDistanceIndex& from) {
    StopDistanceIndex::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopDistanceIndex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.StopDistanceIndex";
  }
  protected:
  explicit StopDistanceIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllStopsDistanceIndexFieldNumber = 1,
  };
  // repeated .tc_serialize.DistanceBetweenStops all_stops_distance_index = 1;
  int all_stops_distance_index_size() const;
  private:
  int _internal_all_stops_distance_index_size() const;
  public:
  void clear_all_stops_distance_index();
  ::tc_serialize::DistanceBetweenStops* mutable_all_stops_distance_index(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::DistanceBetweenStops >*
      mutable_all_stops_distance_index();
  private:
  const ::tc_serialize::DistanceBetweenStops& _internal_all_stops_distance_index(int index) const;
  ::tc_serialize::DistanceBetweenStops* _internal_add_all_stops_distance_index();
  public:
  const ::tc_serialize::DistanceBetweenStops& all_stops_distance_index(int index) const;
  ::tc_serialize::DistanceBetweenStops* add_all_stops_distance_index();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::DistanceBetweenStops >&
      all_stops_distance_index() const;

  // @@protoc_insertion_point(class_scope:tc_serialize.StopDistanceIndex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::DistanceBetweenStops > all_stops_distance_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class BusRoute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.BusRoute) */ {
 public:
  inline BusRoute() : BusRoute(nullptr) {}
  ~BusRoute() override;
  explicit PROTOBUF_CONSTEXPR BusRoute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BusRoute(const BusRoute& from);
  BusRoute(BusRoute&& from) noexcept
    : BusRoute() {
    *this = ::std::move(from);
  }

  inline BusRoute& operator=(const BusRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline BusRoute& operator=(BusRoute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BusRoute& default_instance() {
    return *internal_default_instance();
  }
  static inline const BusRoute* internal_default_instance() {
    return reinterpret_cast<const BusRoute*>(
               &_BusRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BusRoute& a, BusRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(BusRoute* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BusRoute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BusRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BusRoute>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BusRoute& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BusRoute& from) {
    BusRoute::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BusRoute* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.BusRoute";
  }
  protected:
  explicit BusRoute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopIdsFieldNumber = 3,
    kBusNameFieldNumber = 1,
    kRouteTypeFieldNumber = 2,
  };
  // repeated uint32 stop_ids = 3;
  int stop_ids_size() const;
  private:
  int _internal_stop_ids_size() const;
  public:
  void clear_stop_ids();
  private:
  uint32_t _internal_stop_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_stop_ids() const;
  void _internal_add_stop_ids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_stop_ids();
  public:
  uint32_t stop_ids(int index) const;
  void set_stop_ids(int index, uint32_t value);
  void add_stop_ids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      stop_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_stop_ids();

  // string bus_name = 1;
  void clear_bus_name();
  const std::string& bus_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bus_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bus_name();
  PROTOBUF_NODISCARD std::string* release_bus_name();
  void set_allocated_bus_name(std::string* bus_name);
  private:
  const std::string& _internal_bus_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bus_name(const std::string& value);
  std::string* _internal_mutable_bus_name();
  public:

  // int32 route_type = 2;
  void clear_route_type();
  int32_t route_type() const;
  void set_route_type(int32_t value);
  private:
  int32_t _internal_route_type() const;
  void _internal_set_route_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tc_serialize.BusRoute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > stop_ids_;
    mutable std::atomic<int> _stop_ids_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bus_name_;
    int32_t route_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class AllRoutesList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.AllRoutesList) */ {
 public:
  inline AllRoutesList() : AllRoutesList(nullptr) {}
  ~AllRoutesList() override;
  explicit PROTOBUF_CONSTEXPR AllRoutesList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllRoutesList(const AllRoutesList& from);
  AllRoutesList(AllRoutesList&& from) noexcept
    : AllRoutesList() {
    *this = ::std::move(from);
  }

  inline AllRoutesList& operator=(const AllRoutesList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllRoutesList& operator=(AllRoutesList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllRoutesList& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllRoutesList* internal_default_instance() {
    return reinterpret_cast<const AllRoutesList*>(
               &_AllRoutesList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AllRoutesList& a, AllRoutesList& b) {
    a.Swap(&b);
  }
  inline void Swap(AllRoutesList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllRoutesList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllRoutesList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AllRoutesList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AllRoutesList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AllRoutesList& from) {
    AllRoutesList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllRoutesList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.AllRoutesList";
  }
  protected:
  explicit AllRoutesList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesListFieldNumber = 1,
  };
  // repeated .tc_serialize.BusRoute routes_list = 1;
  int routes_list_size() const;
  private:
  int _internal_routes_list_size() const;
  public:
  void clear_routes_list();
  ::tc_serialize::BusRoute* mutable_routes_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::BusRoute >*
      mutable_routes_list();
  private:
  const ::tc_serialize::BusRoute& _internal_routes_list(int index) const;
  ::tc_serialize::BusRoute* _internal_add_routes_list();
  public:
  const ::tc_serialize::BusRoute& routes_list(int index) const;
  ::tc_serialize::BusRoute* add_routes_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::BusRoute >&
      routes_list() const;

  // @@protoc_insertion_point(class_scope:tc_serialize.AllRoutesList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::BusRoute > routes_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class BaseSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.BaseSettings) */ {
 public:
  inline BaseSettings() : BaseSettings(nullptr) {}
  ~BaseSettings() override;
  explicit PROTOBUF_CONSTEXPR BaseSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaseSettings(const BaseSettings& from);
  BaseSettings(BaseSettings&& from) noexcept
    : BaseSettings() {
    *this = ::std::move(from);
  }

  inline BaseSettings& operator=(const BaseSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseSettings& operator=(BaseSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseSettings* internal_default_instance() {
    return reinterpret_cast<const BaseSettings*>(
               &_BaseSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BaseSettings& a, BaseSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaseSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BaseSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BaseSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BaseSettings& from) {
    BaseSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.BaseSettings";
  }
  protected:
  explicit BaseSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsListFieldNumber = 1,
    kStopDistIndexFieldNumber = 2,
    kAllRoutesListFieldNumber = 3,
  };
  // .tc_serialize.StopsList stops_list = 1;
  bool has_stops_list() const;
  private:
  bool _internal_has_stops_list() const;
  public:
  void clear_stops_list();
  const ::tc_serialize::StopsList& stops_list() const;
  PROTOBUF_NODISCARD ::tc_serialize::StopsList* release_stops_list();
  ::tc_serialize::StopsList* mutable_stops_list();
  void set_allocated_stops_list(::tc_serialize::StopsList* stops_list);
  private:
  const ::tc_serialize::StopsList& _internal_stops_list() const;
  ::tc_serialize::StopsList* _internal_mutable_stops_list();
  public:
  void unsafe_arena_set_allocated_stops_list(
      ::tc_serialize::StopsList* stops_list);
  ::tc_serialize::StopsList* unsafe_arena_release_stops_list();

  // .tc_serialize.StopDistanceIndex stop_dist_index = 2;
  bool has_stop_dist_index() const;
  private:
  bool _internal_has_stop_dist_index() const;
  public:
  void clear_stop_dist_index();
  const ::tc_serialize::StopDistanceIndex& stop_dist_index() const;
  PROTOBUF_NODISCARD ::tc_serialize::StopDistanceIndex* release_stop_dist_index();
  ::tc_serialize::StopDistanceIndex* mutable_stop_dist_index();
  void set_allocated_stop_dist_index(::tc_serialize::StopDistanceIndex* stop_dist_index);
  private:
  const ::tc_serialize::StopDistanceIndex& _internal_stop_dist_index() const;
  ::tc_serialize::StopDistanceIndex* _internal_mutable_stop_dist_index();
  public:
  void unsafe_arena_set_allocated_stop_dist_index(
      ::tc_serialize::StopDistanceIndex* stop_dist_index);
  ::tc_serialize::StopDistanceIndex* unsafe_arena_release_stop_dist_index();

  // .tc_serialize.AllRoutesList all_routes_list = 3;
  bool has_all_routes_list() const;
  private:
  bool _internal_has_all_routes_list() const;
  public:
  void clear_all_routes_list();
  const ::tc_serialize::AllRoutesList& all_routes_list() const;
  PROTOBUF_NODISCARD ::tc_serialize::AllRoutesList* release_all_routes_list();
  ::tc_serialize::AllRoutesList* mutable_all_routes_list();
  void set_allocated_all_routes_list(::tc_serialize::AllRoutesList* all_routes_list);
  private:
  const ::tc_serialize::AllRoutesList& _internal_all_routes_list() const;
  ::tc_serialize::AllRoutesList* _internal_mutable_all_routes_list();
  public:
  void unsafe_arena_set_allocated_all_routes_list(
      ::tc_serialize::AllRoutesList* all_routes_list);
  ::tc_serialize::AllRoutesList* unsafe_arena_release_all_routes_list();

  // @@protoc_insertion_point(class_scope:tc_serialize.BaseSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::tc_serialize::StopsList* stops_list_;
    ::tc_serialize::StopDistanceIndex* stop_dist_index_;
    ::tc_serialize::AllRoutesList* all_routes_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Coordinates

// double latitude = 1;
inline void Coordinates::clear_latitude() {
  _impl_.latitude_ = 0;
}
inline double Coordinates::_internal_latitude() const {
  return _impl_.latitude_;
}
inline double Coordinates::latitude() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Coordinates.latitude)
  return _internal_latitude();
}
inline void Coordinates::_internal_set_latitude(double value) {
  
  _impl_.latitude_ = value;
}
inline void Coordinates::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:tc_serialize.Coordinates.latitude)
}

// double longitude = 2;
inline void Coordinates::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline double Coordinates::_internal_longitude() const {
  return _impl_.longitude_;
}
inline double Coordinates::longitude() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Coordinates.longitude)
  return _internal_longitude();
}
inline void Coordinates::_internal_set_longitude(double value) {
  
  _impl_.longitude_ = value;
}
inline void Coordinates::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:tc_serialize.Coordinates.longitude)
}

// -------------------------------------------------------------------

// Stop

// uint32 id_stop = 1;
inline void Stop::clear_id_stop() {
  _impl_.id_stop_ = 0u;
}
inline uint32_t Stop::_internal_id_stop() const {
  return _impl_.id_stop_;
}
inline uint32_t Stop::id_stop() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Stop.id_stop)
  return _internal_id_stop();
}
inline void Stop::_internal_set_id_stop(uint32_t value) {
  
  _impl_.id_stop_ = value;
}
inline void Stop::set_id_stop(uint32_t value) {
  _internal_set_id_stop(value);
  // @@protoc_insertion_point(field_set:tc_serialize.Stop.id_stop)
}

// string name = 2;
inline void Stop::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Stop::name() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Stop.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Stop::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tc_serialize.Stop.name)
}
inline std::string* Stop::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tc_serialize.Stop.name)
  return _s;
}
inline const std::string& Stop::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Stop::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Stop::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Stop::release_name() {
  // @@protoc_insertion_point(field_release:tc_serialize.Stop.name)
  return _impl_.name_.Release();
}
inline void Stop::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.Stop.name)
}

// .tc_serialize.Coordinates coords = 3;
inline bool Stop::_internal_has_coords() const {
  return this != internal_default_instance() && _impl_.coords_ != nullptr;
}
inline bool Stop::has_coords() const {
  return _internal_has_coords();
}
inline void Stop::clear_coords() {
  if (GetArenaForAllocation() == nullptr && _impl_.coords_ != nullptr) {
    delete _impl_.coords_;
  }
  _impl_.coords_ = nullptr;
}
inline const ::tc_serialize::Coordinates& Stop::_internal_coords() const {
  const ::tc_serialize::Coordinates* p = _impl_.coords_;
  return p != nullptr ? *p : reinterpret_cast<const ::tc_serialize::Coordinates&>(
      ::tc_serialize::_Coordinates_default_instance_);
}
inline const ::tc_serialize::Coordinates& Stop::coords() const {
  // @@protoc_insertion_point(field_get:tc_serialize.Stop.coords)
  return _internal_coords();
}
inline void Stop::unsafe_arena_set_allocated_coords(
    ::tc_serialize::Coordinates* coords) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.coords_);
  }
  _impl_.coords_ = coords;
  if (coords) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tc_serialize.Stop.coords)
}
inline ::tc_serialize::Coordinates* Stop::release_coords() {
  
  ::tc_serialize::Coordinates* temp = _impl_.coords_;
  _impl_.coords_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tc_serialize::Coordinates* Stop::unsafe_arena_release_coords() {
  // @@protoc_insertion_point(field_release:tc_serialize.Stop.coords)
  
  ::tc_serialize::Coordinates* temp = _impl_.coords_;
  _impl_.coords_ = nullptr;
  return temp;
}
inline ::tc_serialize::Coordinates* Stop::_internal_mutable_coords() {
  
  if (_impl_.coords_ == nullptr) {
    auto* p = CreateMaybeMessage<::tc_serialize::Coordinates>(GetArenaForAllocation());
    _impl_.coords_ = p;
  }
  return _impl_.coords_;
}
inline ::tc_serialize::Coordinates* Stop::mutable_coords() {
  ::tc_serialize::Coordinates* _msg = _internal_mutable_coords();
  // @@protoc_insertion_point(field_mutable:tc_serialize.Stop.coords)
  return _msg;
}
inline void Stop::set_allocated_coords(::tc_serialize::Coordinates* coords) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.coords_;
  }
  if (coords) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(coords);
    if (message_arena != submessage_arena) {
      coords = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coords, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.coords_ = coords;
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.Stop.coords)
}

// -------------------------------------------------------------------

// StopsList

// repeated .tc_serialize.Stop all_stops = 1;
inline int StopsList::_internal_all_stops_size() const {
  return _impl_.all_stops_.size();
}
inline int StopsList::all_stops_size() const {
  return _internal_all_stops_size();
}
inline void StopsList::clear_all_stops() {
  _impl_.all_stops_.Clear();
}
inline ::tc_serialize::Stop* StopsList::mutable_all_stops(int index) {
  // @@protoc_insertion_point(field_mutable:tc_serialize.StopsList.all_stops)
  return _impl_.all_stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Stop >*
StopsList::mutable_all_stops() {
  // @@protoc_insertion_point(field_mutable_list:tc_serialize.StopsList.all_stops)
  return &_impl_.all_stops_;
}
inline const ::tc_serialize::Stop& StopsList::_internal_all_stops(int index) const {
  return _impl_.all_stops_.Get(index);
}
inline const ::tc_serialize::Stop& StopsList::all_stops(int index) const {
  // @@protoc_insertion_point(field_get:tc_serialize.StopsList.all_stops)
  return _internal_all_stops(index);
}
inline ::tc_serialize::Stop* StopsList::_internal_add_all_stops() {
  return _impl_.all_stops_.Add();
}
inline ::tc_serialize::Stop* StopsList::add_all_stops() {
  ::tc_serialize::Stop* _add = _internal_add_all_stops();
  // @@protoc_insertion_point(field_add:tc_serialize.StopsList.all_stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::Stop >&
StopsList::all_stops() const {
  // @@protoc_insertion_point(field_list:tc_serialize.StopsList.all_stops)
  return _impl_.all_stops_;
}

// -------------------------------------------------------------------

// DistanceBetweenStops

// uint32 from_id = 1;
inline void DistanceBetweenStops::clear_from_id() {
  _impl_.from_id_ = 0u;
}
inline uint32_t DistanceBetweenStops::_internal_from_id() const {
  return _impl_.from_id_;
}
inline uint32_t DistanceBetweenStops::from_id() const {
  // @@protoc_insertion_point(field_get:tc_serialize.DistanceBetweenStops.from_id)
  return _internal_from_id();
}
inline void DistanceBetweenStops::_internal_set_from_id(uint32_t value) {
  
  _impl_.from_id_ = value;
}
inline void DistanceBetweenStops::set_from_id(uint32_t value) {
  _internal_set_from_id(value);
  // @@protoc_insertion_point(field_set:tc_serialize.DistanceBetweenStops.from_id)
}

// uint32 to_id = 2;
inline void DistanceBetweenStops::clear_to_id() {
  _impl_.to_id_ = 0u;
}
inline uint32_t DistanceBetweenStops::_internal_to_id() const {
  return _impl_.to_id_;
}
inline uint32_t DistanceBetweenStops::to_id() const {
  // @@protoc_insertion_point(field_get:tc_serialize.DistanceBetweenStops.to_id)
  return _internal_to_id();
}
inline void DistanceBetweenStops::_internal_set_to_id(uint32_t value) {
  
  _impl_.to_id_ = value;
}
inline void DistanceBetweenStops::set_to_id(uint32_t value) {
  _internal_set_to_id(value);
  // @@protoc_insertion_point(field_set:tc_serialize.DistanceBetweenStops.to_id)
}

// uint64 distance = 3;
inline void DistanceBetweenStops::clear_distance() {
  _impl_.distance_ = uint64_t{0u};
}
inline uint64_t DistanceBetweenStops::_internal_distance() const {
  return _impl_.distance_;
}
inline uint64_t DistanceBetweenStops::distance() const {
  // @@protoc_insertion_point(field_get:tc_serialize.DistanceBetweenStops.distance)
  return _internal_distance();
}
inline void DistanceBetweenStops::_internal_set_distance(uint64_t value) {
  
  _impl_.distance_ = value;
}
inline void DistanceBetweenStops::set_distance(uint64_t value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:tc_serialize.DistanceBetweenStops.distance)
}

// -------------------------------------------------------------------

// StopDistanceIndex

// repeated .tc_serialize.DistanceBetweenStops all_stops_distance_index = 1;
inline int StopDistanceIndex::_internal_all_stops_distance_index_size() const {
  return _impl_.all_stops_distance_index_.size();
}
inline int StopDistanceIndex::all_stops_distance_index_size() const {
  return _internal_all_stops_distance_index_size();
}
inline void StopDistanceIndex::clear_all_stops_distance_index() {
  _impl_.all_stops_distance_index_.Clear();
}
inline ::tc_serialize::DistanceBetweenStops* StopDistanceIndex::mutable_all_stops_distance_index(int index) {
  // @@protoc_insertion_point(field_mutable:tc_serialize.StopDistanceIndex.all_stops_distance_index)
  return _impl_.all_stops_distance_index_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::DistanceBetweenStops >*
StopDistanceIndex::mutable_all_stops_distance_index() {
  // @@protoc_insertion_point(field_mutable_list:tc_serialize.StopDistanceIndex.all_stops_distance_index)
  return &_impl_.all_stops_distance_index_;
}
inline const ::tc_serialize::DistanceBetweenStops& StopDistanceIndex::_internal_all_stops_distance_index(int index) const {
  return _impl_.all_stops_distance_index_.Get(index);
}
inline const ::tc_serialize::DistanceBetweenStops& StopDistanceIndex::all_stops_distance_index(int index) const {
  // @@protoc_insertion_point(field_get:tc_serialize.StopDistanceIndex.all_stops_distance_index)
  return _internal_all_stops_distance_index(index);
}
inline ::tc_serialize::DistanceBetweenStops* StopDistanceIndex::_internal_add_all_stops_distance_index() {
  return _impl_.all_stops_distance_index_.Add();
}
inline ::tc_serialize::DistanceBetweenStops* StopDistanceIndex::add_all_stops_distance_index() {
  ::tc_serialize::DistanceBetweenStops* _add = _internal_add_all_stops_distance_index();
  // @@protoc_insertion_point(field_add:tc_serialize.StopDistanceIndex.all_stops_distance_index)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::DistanceBetweenStops >&
StopDistanceIndex::all_stops_distance_index() const {
  // @@protoc_insertion_point(field_list:tc_serialize.StopDistanceIndex.all_stops_distance_index)
  return _impl_.all_stops_distance_index_;
}

// -------------------------------------------------------------------

// BusRoute

// string bus_name = 1;
inline void BusRoute::clear_bus_name() {
  _impl_.bus_name_.ClearToEmpty();
}
inline const std::string& BusRoute::bus_name() const {
  // @@protoc_insertion_point(field_get:tc_serialize.BusRoute.bus_name)
  return _internal_bus_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BusRoute::set_bus_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bus_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tc_serialize.BusRoute.bus_name)
}
inline std::string* BusRoute::mutable_bus_name() {
  std::string* _s = _internal_mutable_bus_name();
  // @@protoc_insertion_point(field_mutable:tc_serialize.BusRoute.bus_name)
  return _s;
}
inline const std::string& BusRoute::_internal_bus_name() const {
  return _impl_.bus_name_.Get();
}
inline void BusRoute::_internal_set_bus_name(const std::string& value) {
  
  _impl_.bus_name_.Set(value, GetArenaForAllocation());
}
inline std::string* BusRoute::_internal_mutable_bus_name() {
  
  return _impl_.bus_name_.Mutable(GetArenaForAllocation());
}
inline std::string* BusRoute::release_bus_name() {
  // @@protoc_insertion_point(field_release:tc_serialize.BusRoute.bus_name)
  return _impl_.bus_name_.Release();
}
inline void BusRoute::set_allocated_bus_name(std::string* bus_name) {
  if (bus_name != nullptr) {
    
  } else {
    
  }
  _impl_.bus_name_.SetAllocated(bus_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bus_name_.IsDefault()) {
    _impl_.bus_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.BusRoute.bus_name)
}

// int32 route_type = 2;
inline void BusRoute::clear_route_type() {
  _impl_.route_type_ = 0;
}
inline int32_t BusRoute::_internal_route_type() const {
  return _impl_.route_type_;
}
inline int32_t BusRoute::route_type() const {
  // @@protoc_insertion_point(field_get:tc_serialize.BusRoute.route_type)
  return _internal_route_type();
}
inline void BusRoute::_internal_set_route_type(int32_t value) {
  
  _impl_.route_type_ = value;
}
inline void BusRoute::set_route_type(int32_t value) {
  _internal_set_route_type(value);
  // @@protoc_insertion_point(field_set:tc_serialize.BusRoute.route_type)
}

// repeated uint32 stop_ids = 3;
inline int BusRoute::_internal_stop_ids_size() const {
  return _impl_.stop_ids_.size();
}
inline int BusRoute::stop_ids_size() const {
  return _internal_stop_ids_size();
}
inline void BusRoute::clear_stop_ids() {
  _impl_.stop_ids_.Clear();
}
inline uint32_t BusRoute::_internal_stop_ids(int index) const {
  return _impl_.stop_ids_.Get(index);
}
inline uint32_t BusRoute::stop_ids(int index) const {
  // @@protoc_insertion_point(field_get:tc_serialize.BusRoute.stop_ids)
  return _internal_stop_ids(index);
}
inline void BusRoute::set_stop_ids(int index, uint32_t value) {
  _impl_.stop_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:tc_serialize.BusRoute.stop_ids)
}
inline void BusRoute::_internal_add_stop_ids(uint32_t value) {
  _impl_.stop_ids_.Add(value);
}
inline void BusRoute::add_stop_ids(uint32_t value) {
  _internal_add_stop_ids(value);
  // @@protoc_insertion_point(field_add:tc_serialize.BusRoute.stop_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
BusRoute::_internal_stop_ids() const {
  return _impl_.stop_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
BusRoute::stop_ids() const {
  // @@protoc_insertion_point(field_list:tc_serialize.BusRoute.stop_ids)
  return _internal_stop_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
BusRoute::_internal_mutable_stop_ids() {
  return &_impl_.stop_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
BusRoute::mutable_stop_ids() {
  // @@protoc_insertion_point(field_mutable_list:tc_serialize.BusRoute.stop_ids)
  return _internal_mutable_stop_ids();
}

// -------------------------------------------------------------------

// AllRoutesList

// repeated .tc_serialize.BusRoute routes_list = 1;
inline int AllRoutesList::_internal_routes_list_size() const {
  return _impl_.routes_list_.size();
}
inline int AllRoutesList::routes_list_size() const {
  return _internal_routes_list_size();
}
inline void AllRoutesList::clear_routes_list() {
  _impl_.routes_list_.Clear();
}
inline ::tc_serialize::BusRoute* AllRoutesList::mutable_routes_list(int index) {
  // @@protoc_insertion_point(field_mutable:tc_serialize.AllRoutesList.routes_list)
  return _impl_.routes_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::BusRoute >*
AllRoutesList::mutable_routes_list() {
  // @@protoc_insertion_point(field_mutable_list:tc_serialize.AllRoutesList.routes_list)
  return &_impl_.routes_list_;
}
inline const ::tc_serialize::BusRoute& AllRoutesList::_internal_routes_list(int index) const {
  return _impl_.routes_list_.Get(index);
}
inline const ::tc_serialize::BusRoute& AllRoutesList::routes_list(int index) const {
  // @@protoc_insertion_point(field_get:tc_serialize.AllRoutesList.routes_list)
  return _internal_routes_list(index);
}
inline ::tc_serialize::BusRoute* AllRoutesList::_internal_add_routes_list() {
  return _impl_.routes_list_.Add();
}
inline ::tc_serialize::BusRoute* AllRoutesList::add_routes_list() {
  ::tc_serialize::BusRoute* _add = _internal_add_routes_list();
  // @@protoc_insertion_point(field_add:tc_serialize.AllRoutesList.routes_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::BusRoute >&
AllRoutesList::routes_list() const {
  // @@protoc_insertion_point(field_list:tc_serialize.AllRoutesList.routes_list)
  return _impl_.routes_list_;
}

// -------------------------------------------------------------------

// BaseSettings

// .tc_serialize.StopsList stops_list = 1;
inline bool BaseSettings::_internal_has_stops_list() const {
  return this != internal_default_instance() && _impl_.stops_list_ != nullptr;
}
inline bool BaseSettings::has_stops_list() const {
  return _internal_has_stops_list();
}
inline void BaseSettings::clear_stops_list() {
  if (GetArenaForAllocation() == nullptr && _impl_.stops_list_ != nullptr) {
    delete _impl_.stops_list_;
  }
  _impl_.stops_list_ = nullptr;
}
inline const ::tc_serialize::StopsList& BaseSettings::_internal_stops_list() const {
  const ::tc_serialize::StopsList* p = _impl_.stops_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::tc_serialize::StopsList&>(
      ::tc_serialize::_StopsList_default_instance_);
}
inline const ::tc_serialize::StopsList& BaseSettings::stops_list() const {
  // @@protoc_insertion_point(field_get:tc_serialize.BaseSettings.stops_list)
  return _internal_stops_list();
}
inline void BaseSettings::unsafe_arena_set_allocated_stops_list(
    ::tc_serialize::StopsList* stops_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stops_list_);
  }
  _impl_.stops_list_ = stops_list;
  if (stops_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tc_serialize.BaseSettings.stops_list)
}
inline ::tc_serialize::StopsList* BaseSettings::release_stops_list() {
  
  ::tc_serialize::StopsList* temp = _impl_.stops_list_;
  _impl_.stops_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tc_serialize::StopsList* BaseSettings::unsafe_arena_release_stops_list() {
  // @@protoc_insertion_point(field_release:tc_serialize.BaseSettings.stops_list)
  
  ::tc_serialize::StopsList* temp = _impl_.stops_list_;
  _impl_.stops_list_ = nullptr;
  return temp;
}
inline ::tc_serialize::StopsList* BaseSettings::_internal_mutable_stops_list() {
  
  if (_impl_.stops_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::tc_serialize::StopsList>(GetArenaForAllocation());
    _impl_.stops_list_ = p;
  }
  return _impl_.stops_list_;
}
inline ::tc_serialize::StopsList* BaseSettings::mutable_stops_list() {
  ::tc_serialize::StopsList* _msg = _internal_mutable_stops_list();
  // @@protoc_insertion_point(field_mutable:tc_serialize.BaseSettings.stops_list)
  return _msg;
}
inline void BaseSettings::set_allocated_stops_list(::tc_serialize::StopsList* stops_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stops_list_;
  }
  if (stops_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stops_list);
    if (message_arena != submessage_arena) {
      stops_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stops_list, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stops_list_ = stops_list;
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.BaseSettings.stops_list)
}

// .tc_serialize.StopDistanceIndex stop_dist_index = 2;
inline bool BaseSettings::_internal_has_stop_dist_index() const {
  return this != internal_default_instance() && _impl_.stop_dist_index_ != nullptr;
}
inline bool BaseSettings::has_stop_dist_index() const {
  return _internal_has_stop_dist_index();
}
inline void BaseSettings::clear_stop_dist_index() {
  if (GetArenaForAllocation() == nullptr && _impl_.stop_dist_index_ != nullptr) {
    delete _impl_.stop_dist_index_;
  }
  _impl_.stop_dist_index_ = nullptr;
}
inline const ::tc_serialize::StopDistanceIndex& BaseSettings::_internal_stop_dist_index() const {
  const ::tc_serialize::StopDistanceIndex* p = _impl_.stop_dist_index_;
  return p != nullptr ? *p : reinterpret_cast<const ::tc_serialize::StopDistanceIndex&>(
      ::tc_serialize::_StopDistanceIndex_default_instance_);
}
inline const ::tc_serialize::StopDistanceIndex& BaseSettings::stop_dist_index() const {
  // @@protoc_insertion_point(field_get:tc_serialize.BaseSettings.stop_dist_index)
  return _internal_stop_dist_index();
}
inline void BaseSettings::unsafe_arena_set_allocated_stop_dist_index(
    ::tc_serialize::StopDistanceIndex* stop_dist_index) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stop_dist_index_);
  }
  _impl_.stop_dist_index_ = stop_dist_index;
  if (stop_dist_index) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tc_serialize.BaseSettings.stop_dist_index)
}
inline ::tc_serialize::StopDistanceIndex* BaseSettings::release_stop_dist_index() {
  
  ::tc_serialize::StopDistanceIndex* temp = _impl_.stop_dist_index_;
  _impl_.stop_dist_index_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tc_serialize::StopDistanceIndex* BaseSettings::unsafe_arena_release_stop_dist_index() {
  // @@protoc_insertion_point(field_release:tc_serialize.BaseSettings.stop_dist_index)
  
  ::tc_serialize::StopDistanceIndex* temp = _impl_.stop_dist_index_;
  _impl_.stop_dist_index_ = nullptr;
  return temp;
}
inline ::tc_serialize::StopDistanceIndex* BaseSettings::_internal_mutable_stop_dist_index() {
  
  if (_impl_.stop_dist_index_ == nullptr) {
    auto* p = CreateMaybeMessage<::tc_serialize::StopDistanceIndex>(GetArenaForAllocation());
    _impl_.stop_dist_index_ = p;
  }
  return _impl_.stop_dist_index_;
}
inline ::tc_serialize::StopDistanceIndex* BaseSettings::mutable_stop_dist_index() {
  ::tc_serialize::StopDistanceIndex* _msg = _internal_mutable_stop_dist_index();
  // @@protoc_insertion_point(field_mutable:tc_serialize.BaseSettings.stop_dist_index)
  return _msg;
}
inline void BaseSettings::set_allocated_stop_dist_index(::tc_serialize::StopDistanceIndex* stop_dist_index) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stop_dist_index_;
  }
  if (stop_dist_index) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stop_dist_index);
    if (message_arena != submessage_arena) {
      stop_dist_index = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_dist_index, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stop_dist_index_ = stop_dist_index;
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.BaseSettings.stop_dist_index)
}

// .tc_serialize.AllRoutesList all_routes_list = 3;
inline bool BaseSettings::_internal_has_all_routes_list() const {
  return this != internal_default_instance() && _impl_.all_routes_list_ != nullptr;
}
inline bool BaseSettings::has_all_routes_list() const {
  return _internal_has_all_routes_list();
}
inline void BaseSettings::clear_all_routes_list() {
  if (GetArenaForAllocation() == nullptr && _impl_.all_routes_list_ != nullptr) {
    delete _impl_.all_routes_list_;
  }
  _impl_.all_routes_list_ = nullptr;
}
inline const ::tc_serialize::AllRoutesList& BaseSettings::_internal_all_routes_list() const {
  const ::tc_serialize::AllRoutesList* p = _impl_.all_routes_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::tc_serialize::AllRoutesList&>(
      ::tc_serialize::_AllRoutesList_default_instance_);
}
inline const ::tc_serialize::AllRoutesList& BaseSettings::all_routes_list() const {
  // @@protoc_insertion_point(field_get:tc_serialize.BaseSettings.all_routes_list)
  return _internal_all_routes_list();
}
inline void BaseSettings::unsafe_arena_set_allocated_all_routes_list(
    ::tc_serialize::AllRoutesList* all_routes_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.all_routes_list_);
  }
  _impl_.all_routes_list_ = all_routes_list;
  if (all_routes_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tc_serialize.BaseSettings.all_routes_list)
}
inline ::tc_serialize::AllRoutesList* BaseSettings::release_all_routes_list() {
  
  ::tc_serialize::AllRoutesList* temp = _impl_.all_routes_list_;
  _impl_.all_routes_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tc_serialize::AllRoutesList* BaseSettings::unsafe_arena_release_all_routes_list() {
  // @@protoc_insertion_point(field_release:tc_serialize.BaseSettings.all_routes_list)
  
  ::tc_serialize::AllRoutesList* temp = _impl_.all_routes_list_;
  _impl_.all_routes_list_ = nullptr;
  return temp;
}
inline ::tc_serialize::AllRoutesList* BaseSettings::_internal_mutable_all_routes_list() {
  
  if (_impl_.all_routes_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::tc_serialize::AllRoutesList>(GetArenaForAllocation());
    _impl_.all_routes_list_ = p;
  }
  return _impl_.all_routes_list_;
}
inline ::tc_serialize::AllRoutesList* BaseSettings::mutable_all_routes_list() {
  ::tc_serialize::AllRoutesList* _msg = _internal_mutable_all_routes_list();
  // @@protoc_insertion_point(field_mutable:tc_serialize.BaseSettings.all_routes_list)
  return _msg;
}
inline void BaseSettings::set_allocated_all_routes_list(::tc_serialize::AllRoutesList* all_routes_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.all_routes_list_;
  }
  if (all_routes_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(all_routes_list);
    if (message_arena != submessage_arena) {
      all_routes_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all_routes_list, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.all_routes_list_ = all_routes_list;
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.BaseSettings.all_routes_list)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tc_serialize

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
