// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_router.proto

#include "transport_router.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tc_serialize {
PROTOBUF_CONSTEXPR RoutingSettings::RoutingSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bus_wait_time_)*/int64_t{0}
  , /*decltype(_impl_.bus_velocity_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoutingSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingSettingsDefaultTypeInternal() {}
  union {
    RoutingSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingSettingsDefaultTypeInternal _RoutingSettings_default_instance_;
PROTOBUF_CONSTEXPR StopOnRoutePB::StopOnRoutePB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bus_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stop_number_)*/uint64_t{0u}
  , /*decltype(_impl_.vertex_id_)*/uint64_t{0u}
  , /*decltype(_impl_.stop_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StopOnRoutePBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopOnRoutePBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopOnRoutePBDefaultTypeInternal() {}
  union {
    StopOnRoutePB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopOnRoutePBDefaultTypeInternal _StopOnRoutePB_default_instance_;
PROTOBUF_CONSTEXPR TwoStopsLinkPB::TwoStopsLinkPB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bus_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stop_from_)*/uint64_t{0u}
  , /*decltype(_impl_.stop_to_)*/uint64_t{0u}
  , /*decltype(_impl_.num_of_stops_)*/uint64_t{0u}
  , /*decltype(_impl_.edge_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TwoStopsLinkPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TwoStopsLinkPBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TwoStopsLinkPBDefaultTypeInternal() {}
  union {
    TwoStopsLinkPB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TwoStopsLinkPBDefaultTypeInternal _TwoStopsLinkPB_default_instance_;
PROTOBUF_CONSTEXPR EdgePB::EdgePB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.from_)*/uint64_t{0u}
  , /*decltype(_impl_.to_)*/uint64_t{0u}
  , /*decltype(_impl_.weight_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EdgePBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgePBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgePBDefaultTypeInternal() {}
  union {
    EdgePB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgePBDefaultTypeInternal _EdgePB_default_instance_;
PROTOBUF_CONSTEXPR EdgeVectorPB::EdgeVectorPB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.edges_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EdgeVectorPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgeVectorPBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgeVectorPBDefaultTypeInternal() {}
  union {
    EdgeVectorPB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgeVectorPBDefaultTypeInternal _EdgeVectorPB_default_instance_;
PROTOBUF_CONSTEXPR IncListPB::IncListPB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.list_)*/{}
  , /*decltype(_impl_._list_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IncListPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IncListPBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IncListPBDefaultTypeInternal() {}
  union {
    IncListPB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IncListPBDefaultTypeInternal _IncListPB_default_instance_;
PROTOBUF_CONSTEXPR IncidenceListPB::IncidenceListPB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lists_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IncidenceListPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IncidenceListPBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IncidenceListPBDefaultTypeInternal() {}
  union {
    IncidenceListPB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IncidenceListPBDefaultTypeInternal _IncidenceListPB_default_instance_;
PROTOBUF_CONSTEXPR TCGraphRouter::TCGraphRouter(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tc_router_stops__)*/{}
  , /*decltype(_impl_.tc_router_links_)*/{}
  , /*decltype(_impl_.graph_edges_)*/nullptr
  , /*decltype(_impl_.graph_incidence_list_)*/nullptr
  , /*decltype(_impl_.edge_count_)*/uint64_t{0u}
  , /*decltype(_impl_.vertex_id_count_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TCGraphRouterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TCGraphRouterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TCGraphRouterDefaultTypeInternal() {}
  union {
    TCGraphRouter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TCGraphRouterDefaultTypeInternal _TCGraphRouter_default_instance_;
PROTOBUF_CONSTEXPR RouteIntDataPB::RouteIntDataPB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.weight_)*/0
  , /*decltype(_impl_.prev_edge_)*/uint64_t{0u}
  , /*decltype(_impl_.prev_edge_empty_)*/false
  , /*decltype(_impl_.data_empty_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RouteIntDataPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RouteIntDataPBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RouteIntDataPBDefaultTypeInternal() {}
  union {
    RouteIntDataPB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RouteIntDataPBDefaultTypeInternal _RouteIntDataPB_default_instance_;
PROTOBUF_CONSTEXPR VertexCountListPB::VertexCountListPB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vertex_list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VertexCountListPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VertexCountListPBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VertexCountListPBDefaultTypeInternal() {}
  union {
    VertexCountListPB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VertexCountListPBDefaultTypeInternal _VertexCountListPB_default_instance_;
PROTOBUF_CONSTEXPR RoutesInternalDataListsPB::RoutesInternalDataListsPB(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.routes_list_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoutesInternalDataListsPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutesInternalDataListsPBDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutesInternalDataListsPBDefaultTypeInternal() {}
  union {
    RoutesInternalDataListsPB _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutesInternalDataListsPBDefaultTypeInternal _RoutesInternalDataListsPB_default_instance_;
PROTOBUF_CONSTEXPR GraphRouterSettings::GraphRouterSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.routing_settings_)*/nullptr
  , /*decltype(_impl_.router_routes_int_data_)*/nullptr
  , /*decltype(_impl_.tc_graph_router_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GraphRouterSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphRouterSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphRouterSettingsDefaultTypeInternal() {}
  union {
    GraphRouterSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphRouterSettingsDefaultTypeInternal _GraphRouterSettings_default_instance_;
}  // namespace tc_serialize
static ::_pb::Metadata file_level_metadata_transport_5frouter_2eproto[12];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_transport_5frouter_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_transport_5frouter_2eproto = nullptr;

const uint32_t TableStruct_transport_5frouter_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::RoutingSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::RoutingSettings, _impl_.bus_wait_time_),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::RoutingSettings, _impl_.bus_velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::StopOnRoutePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::StopOnRoutePB, _impl_.stop_number_),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::StopOnRoutePB, _impl_.stop_id_),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::StopOnRoutePB, _impl_.bus_name_),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::StopOnRoutePB, _impl_.vertex_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::TwoStopsLinkPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::TwoStopsLinkPB, _impl_.bus_name_),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::TwoStopsLinkPB, _impl_.stop_from_),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::TwoStopsLinkPB, _impl_.stop_to_),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::TwoStopsLinkPB, _impl_.num_of_stops_),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::TwoStopsLinkPB, _impl_.edge_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::EdgePB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::EdgePB, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::EdgePB, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::EdgePB, _impl_.weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::EdgeVectorPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::EdgeVectorPB, _impl_.edges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::IncListPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::IncListPB, _impl_.list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::IncidenceListPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::IncidenceListPB, _impl_.lists_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::TCGraphRouter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::TCGraphRouter, _impl_.tc_router_stops__),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::TCGraphRouter, _impl_.tc_router_links_),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::TCGraphRouter, _impl_.edge_count_),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::TCGraphRouter, _impl_.vertex_id_count_),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::TCGraphRouter, _impl_.graph_edges_),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::TCGraphRouter, _impl_.graph_incidence_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::RouteIntDataPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::RouteIntDataPB, _impl_.weight_),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::RouteIntDataPB, _impl_.prev_edge_),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::RouteIntDataPB, _impl_.prev_edge_empty_),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::RouteIntDataPB, _impl_.data_empty_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::VertexCountListPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::VertexCountListPB, _impl_.vertex_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::RoutesInternalDataListsPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::RoutesInternalDataListsPB, _impl_.routes_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::GraphRouterSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tc_serialize::GraphRouterSettings, _impl_.routing_settings_),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::GraphRouterSettings, _impl_.router_routes_int_data_),
  PROTOBUF_FIELD_OFFSET(::tc_serialize::GraphRouterSettings, _impl_.tc_graph_router_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tc_serialize::RoutingSettings)},
  { 8, -1, -1, sizeof(::tc_serialize::StopOnRoutePB)},
  { 18, -1, -1, sizeof(::tc_serialize::TwoStopsLinkPB)},
  { 29, -1, -1, sizeof(::tc_serialize::EdgePB)},
  { 38, -1, -1, sizeof(::tc_serialize::EdgeVectorPB)},
  { 45, -1, -1, sizeof(::tc_serialize::IncListPB)},
  { 52, -1, -1, sizeof(::tc_serialize::IncidenceListPB)},
  { 59, -1, -1, sizeof(::tc_serialize::TCGraphRouter)},
  { 71, -1, -1, sizeof(::tc_serialize::RouteIntDataPB)},
  { 81, -1, -1, sizeof(::tc_serialize::VertexCountListPB)},
  { 88, -1, -1, sizeof(::tc_serialize::RoutesInternalDataListsPB)},
  { 95, -1, -1, sizeof(::tc_serialize::GraphRouterSettings)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tc_serialize::_RoutingSettings_default_instance_._instance,
  &::tc_serialize::_StopOnRoutePB_default_instance_._instance,
  &::tc_serialize::_TwoStopsLinkPB_default_instance_._instance,
  &::tc_serialize::_EdgePB_default_instance_._instance,
  &::tc_serialize::_EdgeVectorPB_default_instance_._instance,
  &::tc_serialize::_IncListPB_default_instance_._instance,
  &::tc_serialize::_IncidenceListPB_default_instance_._instance,
  &::tc_serialize::_TCGraphRouter_default_instance_._instance,
  &::tc_serialize::_RouteIntDataPB_default_instance_._instance,
  &::tc_serialize::_VertexCountListPB_default_instance_._instance,
  &::tc_serialize::_RoutesInternalDataListsPB_default_instance_._instance,
  &::tc_serialize::_GraphRouterSettings_default_instance_._instance,
};

const char descriptor_table_protodef_transport_5frouter_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026transport_router.proto\022\014tc_serialize\">"
  "\n\017RoutingSettings\022\025\n\rbus_wait_time\030\001 \001(\003"
  "\022\024\n\014bus_velocity\030\002 \001(\001\"Z\n\rStopOnRoutePB\022"
  "\023\n\013stop_number\030\001 \001(\004\022\017\n\007stop_id\030\002 \001(\r\022\020\n"
  "\010bus_name\030\003 \001(\t\022\021\n\tvertex_id\030\004 \001(\004\"m\n\016Tw"
  "oStopsLinkPB\022\020\n\010bus_name\030\001 \001(\t\022\021\n\tstop_f"
  "rom\030\002 \001(\004\022\017\n\007stop_to\030\003 \001(\004\022\024\n\014num_of_sto"
  "ps\030\004 \001(\004\022\017\n\007edge_id\030\005 \001(\004\"2\n\006EdgePB\022\014\n\004f"
  "rom\030\001 \001(\004\022\n\n\002to\030\002 \001(\004\022\016\n\006weight\030\003 \001(\001\"3\n"
  "\014EdgeVectorPB\022#\n\005edges\030\001 \003(\0132\024.tc_serial"
  "ize.EdgePB\"\031\n\tIncListPB\022\014\n\004list\030\001 \003(\004\"9\n"
  "\017IncidenceListPB\022&\n\005lists\030\001 \003(\0132\027.tc_ser"
  "ialize.IncListPB\"\230\002\n\rTCGraphRouter\0225\n\020tc"
  "_router_stops_\030\001 \003(\0132\033.tc_serialize.Stop"
  "OnRoutePB\0225\n\017tc_router_links\030\002 \003(\0132\034.tc_"
  "serialize.TwoStopsLinkPB\022\022\n\nedge_count\030\003"
  " \001(\004\022\027\n\017vertex_id_count\030\004 \001(\004\022/\n\013graph_e"
  "dges\030\005 \001(\0132\032.tc_serialize.EdgeVectorPB\022;"
  "\n\024graph_incidence_list\030\006 \001(\0132\035.tc_serial"
  "ize.IncidenceListPB\"`\n\016RouteIntDataPB\022\016\n"
  "\006weight\030\001 \001(\001\022\021\n\tprev_edge\030\002 \001(\004\022\027\n\017prev"
  "_edge_empty\030\003 \001(\010\022\022\n\ndata_empty\030\004 \001(\010\"F\n"
  "\021VertexCountListPB\0221\n\013vertex_list\030\001 \003(\0132"
  "\034.tc_serialize.RouteIntDataPB\"Q\n\031RoutesI"
  "nternalDataListsPB\0224\n\013routes_list\030\001 \003(\0132"
  "\037.tc_serialize.VertexCountListPB\"\315\001\n\023Gra"
  "phRouterSettings\0227\n\020routing_settings\030\001 \001"
  "(\0132\035.tc_serialize.RoutingSettings\022G\n\026rou"
  "ter_routes_int_data\030\002 \001(\0132\'.tc_serialize"
  ".RoutesInternalDataListsPB\0224\n\017tc_graph_r"
  "outer\030\003 \001(\0132\033.tc_serialize.TCGraphRouter"
  "b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_transport_5frouter_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_transport_5frouter_2eproto = {
    false, false, 1248, descriptor_table_protodef_transport_5frouter_2eproto,
    "transport_router.proto",
    &descriptor_table_transport_5frouter_2eproto_once, nullptr, 0, 12,
    schemas, file_default_instances, TableStruct_transport_5frouter_2eproto::offsets,
    file_level_metadata_transport_5frouter_2eproto, file_level_enum_descriptors_transport_5frouter_2eproto,
    file_level_service_descriptors_transport_5frouter_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_transport_5frouter_2eproto_getter() {
  return &descriptor_table_transport_5frouter_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_transport_5frouter_2eproto(&descriptor_table_transport_5frouter_2eproto);
namespace tc_serialize {

// ===================================================================

class RoutingSettings::_Internal {
 public:
};

RoutingSettings::RoutingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tc_serialize.RoutingSettings)
}
RoutingSettings::RoutingSettings(const RoutingSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoutingSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_wait_time_){}
    , decltype(_impl_.bus_velocity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.bus_wait_time_, &from._impl_.bus_wait_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bus_velocity_) -
    reinterpret_cast<char*>(&_impl_.bus_wait_time_)) + sizeof(_impl_.bus_velocity_));
  // @@protoc_insertion_point(copy_constructor:tc_serialize.RoutingSettings)
}

inline void RoutingSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_wait_time_){int64_t{0}}
    , decltype(_impl_.bus_velocity_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoutingSettings::~RoutingSettings() {
  // @@protoc_insertion_point(destructor:tc_serialize.RoutingSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutingSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoutingSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoutingSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:tc_serialize.RoutingSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.bus_wait_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bus_velocity_) -
      reinterpret_cast<char*>(&_impl_.bus_wait_time_)) + sizeof(_impl_.bus_velocity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 bus_wait_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bus_wait_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double bus_velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.bus_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutingSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tc_serialize.RoutingSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bus_wait_time = 1;
  if (this->_internal_bus_wait_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_bus_wait_time(), target);
  }

  // double bus_velocity = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_velocity = this->_internal_bus_velocity();
  uint64_t raw_bus_velocity;
  memcpy(&raw_bus_velocity, &tmp_bus_velocity, sizeof(tmp_bus_velocity));
  if (raw_bus_velocity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_bus_velocity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tc_serialize.RoutingSettings)
  return target;
}

size_t RoutingSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tc_serialize.RoutingSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 bus_wait_time = 1;
  if (this->_internal_bus_wait_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bus_wait_time());
  }

  // double bus_velocity = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_velocity = this->_internal_bus_velocity();
  uint64_t raw_bus_velocity;
  memcpy(&raw_bus_velocity, &tmp_bus_velocity, sizeof(tmp_bus_velocity));
  if (raw_bus_velocity != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoutingSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingSettings::GetClassData() const { return &_class_data_; }


void RoutingSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoutingSettings*>(&to_msg);
  auto& from = static_cast<const RoutingSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tc_serialize.RoutingSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_bus_wait_time() != 0) {
    _this->_internal_set_bus_wait_time(from._internal_bus_wait_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_velocity = from._internal_bus_velocity();
  uint64_t raw_bus_velocity;
  memcpy(&raw_bus_velocity, &tmp_bus_velocity, sizeof(tmp_bus_velocity));
  if (raw_bus_velocity != 0) {
    _this->_internal_set_bus_velocity(from._internal_bus_velocity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingSettings::CopyFrom(const RoutingSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tc_serialize.RoutingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingSettings::IsInitialized() const {
  return true;
}

void RoutingSettings::InternalSwap(RoutingSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingSettings, _impl_.bus_velocity_)
      + sizeof(RoutingSettings::_impl_.bus_velocity_)
      - PROTOBUF_FIELD_OFFSET(RoutingSettings, _impl_.bus_wait_time_)>(
          reinterpret_cast<char*>(&_impl_.bus_wait_time_),
          reinterpret_cast<char*>(&other->_impl_.bus_wait_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[0]);
}

// ===================================================================

class StopOnRoutePB::_Internal {
 public:
};

StopOnRoutePB::StopOnRoutePB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tc_serialize.StopOnRoutePB)
}
StopOnRoutePB::StopOnRoutePB(const StopOnRoutePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StopOnRoutePB* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_name_){}
    , decltype(_impl_.stop_number_){}
    , decltype(_impl_.vertex_id_){}
    , decltype(_impl_.stop_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bus_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bus_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bus_name().empty()) {
    _this->_impl_.bus_name_.Set(from._internal_bus_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.stop_number_, &from._impl_.stop_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stop_id_) -
    reinterpret_cast<char*>(&_impl_.stop_number_)) + sizeof(_impl_.stop_id_));
  // @@protoc_insertion_point(copy_constructor:tc_serialize.StopOnRoutePB)
}

inline void StopOnRoutePB::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_name_){}
    , decltype(_impl_.stop_number_){uint64_t{0u}}
    , decltype(_impl_.vertex_id_){uint64_t{0u}}
    , decltype(_impl_.stop_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bus_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bus_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StopOnRoutePB::~StopOnRoutePB() {
  // @@protoc_insertion_point(destructor:tc_serialize.StopOnRoutePB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopOnRoutePB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bus_name_.Destroy();
}

void StopOnRoutePB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopOnRoutePB::Clear() {
// @@protoc_insertion_point(message_clear_start:tc_serialize.StopOnRoutePB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bus_name_.ClearToEmpty();
  ::memset(&_impl_.stop_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.stop_id_) -
      reinterpret_cast<char*>(&_impl_.stop_number_)) + sizeof(_impl_.stop_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopOnRoutePB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 stop_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.stop_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 stop_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.stop_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bus_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_bus_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tc_serialize.StopOnRoutePB.bus_name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 vertex_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.vertex_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopOnRoutePB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tc_serialize.StopOnRoutePB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 stop_number = 1;
  if (this->_internal_stop_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_stop_number(), target);
  }

  // uint32 stop_id = 2;
  if (this->_internal_stop_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stop_id(), target);
  }

  // string bus_name = 3;
  if (!this->_internal_bus_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bus_name().data(), static_cast<int>(this->_internal_bus_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tc_serialize.StopOnRoutePB.bus_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bus_name(), target);
  }

  // uint64 vertex_id = 4;
  if (this->_internal_vertex_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_vertex_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tc_serialize.StopOnRoutePB)
  return target;
}

size_t StopOnRoutePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tc_serialize.StopOnRoutePB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bus_name = 3;
  if (!this->_internal_bus_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bus_name());
  }

  // uint64 stop_number = 1;
  if (this->_internal_stop_number() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_stop_number());
  }

  // uint64 vertex_id = 4;
  if (this->_internal_vertex_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_vertex_id());
  }

  // uint32 stop_id = 2;
  if (this->_internal_stop_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stop_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopOnRoutePB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StopOnRoutePB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopOnRoutePB::GetClassData() const { return &_class_data_; }


void StopOnRoutePB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StopOnRoutePB*>(&to_msg);
  auto& from = static_cast<const StopOnRoutePB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tc_serialize.StopOnRoutePB)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bus_name().empty()) {
    _this->_internal_set_bus_name(from._internal_bus_name());
  }
  if (from._internal_stop_number() != 0) {
    _this->_internal_set_stop_number(from._internal_stop_number());
  }
  if (from._internal_vertex_id() != 0) {
    _this->_internal_set_vertex_id(from._internal_vertex_id());
  }
  if (from._internal_stop_id() != 0) {
    _this->_internal_set_stop_id(from._internal_stop_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopOnRoutePB::CopyFrom(const StopOnRoutePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tc_serialize.StopOnRoutePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopOnRoutePB::IsInitialized() const {
  return true;
}

void StopOnRoutePB::InternalSwap(StopOnRoutePB* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bus_name_, lhs_arena,
      &other->_impl_.bus_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopOnRoutePB, _impl_.stop_id_)
      + sizeof(StopOnRoutePB::_impl_.stop_id_)
      - PROTOBUF_FIELD_OFFSET(StopOnRoutePB, _impl_.stop_number_)>(
          reinterpret_cast<char*>(&_impl_.stop_number_),
          reinterpret_cast<char*>(&other->_impl_.stop_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopOnRoutePB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[1]);
}

// ===================================================================

class TwoStopsLinkPB::_Internal {
 public:
};

TwoStopsLinkPB::TwoStopsLinkPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tc_serialize.TwoStopsLinkPB)
}
TwoStopsLinkPB::TwoStopsLinkPB(const TwoStopsLinkPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TwoStopsLinkPB* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_name_){}
    , decltype(_impl_.stop_from_){}
    , decltype(_impl_.stop_to_){}
    , decltype(_impl_.num_of_stops_){}
    , decltype(_impl_.edge_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bus_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bus_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bus_name().empty()) {
    _this->_impl_.bus_name_.Set(from._internal_bus_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.stop_from_, &from._impl_.stop_from_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.edge_id_) -
    reinterpret_cast<char*>(&_impl_.stop_from_)) + sizeof(_impl_.edge_id_));
  // @@protoc_insertion_point(copy_constructor:tc_serialize.TwoStopsLinkPB)
}

inline void TwoStopsLinkPB::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_name_){}
    , decltype(_impl_.stop_from_){uint64_t{0u}}
    , decltype(_impl_.stop_to_){uint64_t{0u}}
    , decltype(_impl_.num_of_stops_){uint64_t{0u}}
    , decltype(_impl_.edge_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bus_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bus_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TwoStopsLinkPB::~TwoStopsLinkPB() {
  // @@protoc_insertion_point(destructor:tc_serialize.TwoStopsLinkPB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TwoStopsLinkPB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bus_name_.Destroy();
}

void TwoStopsLinkPB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TwoStopsLinkPB::Clear() {
// @@protoc_insertion_point(message_clear_start:tc_serialize.TwoStopsLinkPB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bus_name_.ClearToEmpty();
  ::memset(&_impl_.stop_from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.edge_id_) -
      reinterpret_cast<char*>(&_impl_.stop_from_)) + sizeof(_impl_.edge_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TwoStopsLinkPB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bus_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bus_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tc_serialize.TwoStopsLinkPB.bus_name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 stop_from = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.stop_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 stop_to = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.stop_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 num_of_stops = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.num_of_stops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 edge_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.edge_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TwoStopsLinkPB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tc_serialize.TwoStopsLinkPB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string bus_name = 1;
  if (!this->_internal_bus_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bus_name().data(), static_cast<int>(this->_internal_bus_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tc_serialize.TwoStopsLinkPB.bus_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bus_name(), target);
  }

  // uint64 stop_from = 2;
  if (this->_internal_stop_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_stop_from(), target);
  }

  // uint64 stop_to = 3;
  if (this->_internal_stop_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_stop_to(), target);
  }

  // uint64 num_of_stops = 4;
  if (this->_internal_num_of_stops() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_num_of_stops(), target);
  }

  // uint64 edge_id = 5;
  if (this->_internal_edge_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_edge_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tc_serialize.TwoStopsLinkPB)
  return target;
}

size_t TwoStopsLinkPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tc_serialize.TwoStopsLinkPB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bus_name = 1;
  if (!this->_internal_bus_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bus_name());
  }

  // uint64 stop_from = 2;
  if (this->_internal_stop_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_stop_from());
  }

  // uint64 stop_to = 3;
  if (this->_internal_stop_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_stop_to());
  }

  // uint64 num_of_stops = 4;
  if (this->_internal_num_of_stops() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_num_of_stops());
  }

  // uint64 edge_id = 5;
  if (this->_internal_edge_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_edge_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TwoStopsLinkPB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TwoStopsLinkPB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TwoStopsLinkPB::GetClassData() const { return &_class_data_; }


void TwoStopsLinkPB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TwoStopsLinkPB*>(&to_msg);
  auto& from = static_cast<const TwoStopsLinkPB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tc_serialize.TwoStopsLinkPB)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bus_name().empty()) {
    _this->_internal_set_bus_name(from._internal_bus_name());
  }
  if (from._internal_stop_from() != 0) {
    _this->_internal_set_stop_from(from._internal_stop_from());
  }
  if (from._internal_stop_to() != 0) {
    _this->_internal_set_stop_to(from._internal_stop_to());
  }
  if (from._internal_num_of_stops() != 0) {
    _this->_internal_set_num_of_stops(from._internal_num_of_stops());
  }
  if (from._internal_edge_id() != 0) {
    _this->_internal_set_edge_id(from._internal_edge_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TwoStopsLinkPB::CopyFrom(const TwoStopsLinkPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tc_serialize.TwoStopsLinkPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwoStopsLinkPB::IsInitialized() const {
  return true;
}

void TwoStopsLinkPB::InternalSwap(TwoStopsLinkPB* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bus_name_, lhs_arena,
      &other->_impl_.bus_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TwoStopsLinkPB, _impl_.edge_id_)
      + sizeof(TwoStopsLinkPB::_impl_.edge_id_)
      - PROTOBUF_FIELD_OFFSET(TwoStopsLinkPB, _impl_.stop_from_)>(
          reinterpret_cast<char*>(&_impl_.stop_from_),
          reinterpret_cast<char*>(&other->_impl_.stop_from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TwoStopsLinkPB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[2]);
}

// ===================================================================

class EdgePB::_Internal {
 public:
};

EdgePB::EdgePB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tc_serialize.EdgePB)
}
EdgePB::EdgePB(const EdgePB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EdgePB* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.from_){}
    , decltype(_impl_.to_){}
    , decltype(_impl_.weight_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.from_, &from._impl_.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.weight_) -
    reinterpret_cast<char*>(&_impl_.from_)) + sizeof(_impl_.weight_));
  // @@protoc_insertion_point(copy_constructor:tc_serialize.EdgePB)
}

inline void EdgePB::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.from_){uint64_t{0u}}
    , decltype(_impl_.to_){uint64_t{0u}}
    , decltype(_impl_.weight_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EdgePB::~EdgePB() {
  // @@protoc_insertion_point(destructor:tc_serialize.EdgePB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EdgePB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EdgePB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EdgePB::Clear() {
// @@protoc_insertion_point(message_clear_start:tc_serialize.EdgePB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.weight_) -
      reinterpret_cast<char*>(&_impl_.from_)) + sizeof(_impl_.weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgePB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdgePB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tc_serialize.EdgePB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 from = 1;
  if (this->_internal_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_from(), target);
  }

  // uint64 to = 2;
  if (this->_internal_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_to(), target);
  }

  // double weight = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tc_serialize.EdgePB)
  return target;
}

size_t EdgePB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tc_serialize.EdgePB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 from = 1;
  if (this->_internal_from() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_from());
  }

  // uint64 to = 2;
  if (this->_internal_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_to());
  }

  // double weight = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdgePB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EdgePB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdgePB::GetClassData() const { return &_class_data_; }


void EdgePB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EdgePB*>(&to_msg);
  auto& from = static_cast<const EdgePB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tc_serialize.EdgePB)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from() != 0) {
    _this->_internal_set_from(from._internal_from());
  }
  if (from._internal_to() != 0) {
    _this->_internal_set_to(from._internal_to());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = from._internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    _this->_internal_set_weight(from._internal_weight());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdgePB::CopyFrom(const EdgePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tc_serialize.EdgePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgePB::IsInitialized() const {
  return true;
}

void EdgePB::InternalSwap(EdgePB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdgePB, _impl_.weight_)
      + sizeof(EdgePB::_impl_.weight_)
      - PROTOBUF_FIELD_OFFSET(EdgePB, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgePB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[3]);
}

// ===================================================================

class EdgeVectorPB::_Internal {
 public:
};

EdgeVectorPB::EdgeVectorPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tc_serialize.EdgeVectorPB)
}
EdgeVectorPB::EdgeVectorPB(const EdgeVectorPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EdgeVectorPB* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.edges_){from._impl_.edges_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tc_serialize.EdgeVectorPB)
}

inline void EdgeVectorPB::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.edges_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EdgeVectorPB::~EdgeVectorPB() {
  // @@protoc_insertion_point(destructor:tc_serialize.EdgeVectorPB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EdgeVectorPB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.edges_.~RepeatedPtrField();
}

void EdgeVectorPB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EdgeVectorPB::Clear() {
// @@protoc_insertion_point(message_clear_start:tc_serialize.EdgeVectorPB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.edges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgeVectorPB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tc_serialize.EdgePB edges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdgeVectorPB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tc_serialize.EdgeVectorPB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tc_serialize.EdgePB edges = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_edges_size()); i < n; i++) {
    const auto& repfield = this->_internal_edges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tc_serialize.EdgeVectorPB)
  return target;
}

size_t EdgeVectorPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tc_serialize.EdgeVectorPB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tc_serialize.EdgePB edges = 1;
  total_size += 1UL * this->_internal_edges_size();
  for (const auto& msg : this->_impl_.edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdgeVectorPB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EdgeVectorPB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdgeVectorPB::GetClassData() const { return &_class_data_; }


void EdgeVectorPB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EdgeVectorPB*>(&to_msg);
  auto& from = static_cast<const EdgeVectorPB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tc_serialize.EdgeVectorPB)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.edges_.MergeFrom(from._impl_.edges_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdgeVectorPB::CopyFrom(const EdgeVectorPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tc_serialize.EdgeVectorPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeVectorPB::IsInitialized() const {
  return true;
}

void EdgeVectorPB::InternalSwap(EdgeVectorPB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.edges_.InternalSwap(&other->_impl_.edges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgeVectorPB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[4]);
}

// ===================================================================

class IncListPB::_Internal {
 public:
};

IncListPB::IncListPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tc_serialize.IncListPB)
}
IncListPB::IncListPB(const IncListPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IncListPB* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){from._impl_.list_}
    , /*decltype(_impl_._list_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tc_serialize.IncListPB)
}

inline void IncListPB::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.list_){arena}
    , /*decltype(_impl_._list_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IncListPB::~IncListPB() {
  // @@protoc_insertion_point(destructor:tc_serialize.IncListPB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IncListPB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.list_.~RepeatedField();
}

void IncListPB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IncListPB::Clear() {
// @@protoc_insertion_point(message_clear_start:tc_serialize.IncListPB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IncListPB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IncListPB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tc_serialize.IncListPB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 list = 1;
  {
    int byte_size = _impl_._list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_list(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tc_serialize.IncListPB)
  return target;
}

size_t IncListPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tc_serialize.IncListPB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 list = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IncListPB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IncListPB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IncListPB::GetClassData() const { return &_class_data_; }


void IncListPB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IncListPB*>(&to_msg);
  auto& from = static_cast<const IncListPB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tc_serialize.IncListPB)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.list_.MergeFrom(from._impl_.list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IncListPB::CopyFrom(const IncListPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tc_serialize.IncListPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncListPB::IsInitialized() const {
  return true;
}

void IncListPB::InternalSwap(IncListPB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.list_.InternalSwap(&other->_impl_.list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IncListPB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[5]);
}

// ===================================================================

class IncidenceListPB::_Internal {
 public:
};

IncidenceListPB::IncidenceListPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tc_serialize.IncidenceListPB)
}
IncidenceListPB::IncidenceListPB(const IncidenceListPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IncidenceListPB* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lists_){from._impl_.lists_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tc_serialize.IncidenceListPB)
}

inline void IncidenceListPB::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lists_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IncidenceListPB::~IncidenceListPB() {
  // @@protoc_insertion_point(destructor:tc_serialize.IncidenceListPB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IncidenceListPB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lists_.~RepeatedPtrField();
}

void IncidenceListPB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IncidenceListPB::Clear() {
// @@protoc_insertion_point(message_clear_start:tc_serialize.IncidenceListPB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lists_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IncidenceListPB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tc_serialize.IncListPB lists = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IncidenceListPB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tc_serialize.IncidenceListPB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tc_serialize.IncListPB lists = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lists_size()); i < n; i++) {
    const auto& repfield = this->_internal_lists(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tc_serialize.IncidenceListPB)
  return target;
}

size_t IncidenceListPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tc_serialize.IncidenceListPB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tc_serialize.IncListPB lists = 1;
  total_size += 1UL * this->_internal_lists_size();
  for (const auto& msg : this->_impl_.lists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IncidenceListPB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IncidenceListPB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IncidenceListPB::GetClassData() const { return &_class_data_; }


void IncidenceListPB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IncidenceListPB*>(&to_msg);
  auto& from = static_cast<const IncidenceListPB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tc_serialize.IncidenceListPB)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lists_.MergeFrom(from._impl_.lists_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IncidenceListPB::CopyFrom(const IncidenceListPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tc_serialize.IncidenceListPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncidenceListPB::IsInitialized() const {
  return true;
}

void IncidenceListPB::InternalSwap(IncidenceListPB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lists_.InternalSwap(&other->_impl_.lists_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IncidenceListPB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[6]);
}

// ===================================================================

class TCGraphRouter::_Internal {
 public:
  static const ::tc_serialize::EdgeVectorPB& graph_edges(const TCGraphRouter* msg);
  static const ::tc_serialize::IncidenceListPB& graph_incidence_list(const TCGraphRouter* msg);
};

const ::tc_serialize::EdgeVectorPB&
TCGraphRouter::_Internal::graph_edges(const TCGraphRouter* msg) {
  return *msg->_impl_.graph_edges_;
}
const ::tc_serialize::IncidenceListPB&
TCGraphRouter::_Internal::graph_incidence_list(const TCGraphRouter* msg) {
  return *msg->_impl_.graph_incidence_list_;
}
TCGraphRouter::TCGraphRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tc_serialize.TCGraphRouter)
}
TCGraphRouter::TCGraphRouter(const TCGraphRouter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TCGraphRouter* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tc_router_stops__){from._impl_.tc_router_stops__}
    , decltype(_impl_.tc_router_links_){from._impl_.tc_router_links_}
    , decltype(_impl_.graph_edges_){nullptr}
    , decltype(_impl_.graph_incidence_list_){nullptr}
    , decltype(_impl_.edge_count_){}
    , decltype(_impl_.vertex_id_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_graph_edges()) {
    _this->_impl_.graph_edges_ = new ::tc_serialize::EdgeVectorPB(*from._impl_.graph_edges_);
  }
  if (from._internal_has_graph_incidence_list()) {
    _this->_impl_.graph_incidence_list_ = new ::tc_serialize::IncidenceListPB(*from._impl_.graph_incidence_list_);
  }
  ::memcpy(&_impl_.edge_count_, &from._impl_.edge_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vertex_id_count_) -
    reinterpret_cast<char*>(&_impl_.edge_count_)) + sizeof(_impl_.vertex_id_count_));
  // @@protoc_insertion_point(copy_constructor:tc_serialize.TCGraphRouter)
}

inline void TCGraphRouter::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tc_router_stops__){arena}
    , decltype(_impl_.tc_router_links_){arena}
    , decltype(_impl_.graph_edges_){nullptr}
    , decltype(_impl_.graph_incidence_list_){nullptr}
    , decltype(_impl_.edge_count_){uint64_t{0u}}
    , decltype(_impl_.vertex_id_count_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TCGraphRouter::~TCGraphRouter() {
  // @@protoc_insertion_point(destructor:tc_serialize.TCGraphRouter)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TCGraphRouter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tc_router_stops__.~RepeatedPtrField();
  _impl_.tc_router_links_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.graph_edges_;
  if (this != internal_default_instance()) delete _impl_.graph_incidence_list_;
}

void TCGraphRouter::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TCGraphRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:tc_serialize.TCGraphRouter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tc_router_stops__.Clear();
  _impl_.tc_router_links_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.graph_edges_ != nullptr) {
    delete _impl_.graph_edges_;
  }
  _impl_.graph_edges_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.graph_incidence_list_ != nullptr) {
    delete _impl_.graph_incidence_list_;
  }
  _impl_.graph_incidence_list_ = nullptr;
  ::memset(&_impl_.edge_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.vertex_id_count_) -
      reinterpret_cast<char*>(&_impl_.edge_count_)) + sizeof(_impl_.vertex_id_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TCGraphRouter::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tc_serialize.StopOnRoutePB tc_router_stops_ = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tc_router_stops_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tc_serialize.TwoStopsLinkPB tc_router_links = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tc_router_links(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 edge_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.edge_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 vertex_id_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.vertex_id_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tc_serialize.EdgeVectorPB graph_edges = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph_edges(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tc_serialize.IncidenceListPB graph_incidence_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph_incidence_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TCGraphRouter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tc_serialize.TCGraphRouter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tc_serialize.StopOnRoutePB tc_router_stops_ = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tc_router_stops__size()); i < n; i++) {
    const auto& repfield = this->_internal_tc_router_stops_(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tc_serialize.TwoStopsLinkPB tc_router_links = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tc_router_links_size()); i < n; i++) {
    const auto& repfield = this->_internal_tc_router_links(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 edge_count = 3;
  if (this->_internal_edge_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_edge_count(), target);
  }

  // uint64 vertex_id_count = 4;
  if (this->_internal_vertex_id_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_vertex_id_count(), target);
  }

  // .tc_serialize.EdgeVectorPB graph_edges = 5;
  if (this->_internal_has_graph_edges()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::graph_edges(this),
        _Internal::graph_edges(this).GetCachedSize(), target, stream);
  }

  // .tc_serialize.IncidenceListPB graph_incidence_list = 6;
  if (this->_internal_has_graph_incidence_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::graph_incidence_list(this),
        _Internal::graph_incidence_list(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tc_serialize.TCGraphRouter)
  return target;
}

size_t TCGraphRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tc_serialize.TCGraphRouter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tc_serialize.StopOnRoutePB tc_router_stops_ = 1;
  total_size += 1UL * this->_internal_tc_router_stops__size();
  for (const auto& msg : this->_impl_.tc_router_stops__) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tc_serialize.TwoStopsLinkPB tc_router_links = 2;
  total_size += 1UL * this->_internal_tc_router_links_size();
  for (const auto& msg : this->_impl_.tc_router_links_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tc_serialize.EdgeVectorPB graph_edges = 5;
  if (this->_internal_has_graph_edges()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.graph_edges_);
  }

  // .tc_serialize.IncidenceListPB graph_incidence_list = 6;
  if (this->_internal_has_graph_incidence_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.graph_incidence_list_);
  }

  // uint64 edge_count = 3;
  if (this->_internal_edge_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_edge_count());
  }

  // uint64 vertex_id_count = 4;
  if (this->_internal_vertex_id_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_vertex_id_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TCGraphRouter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TCGraphRouter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TCGraphRouter::GetClassData() const { return &_class_data_; }


void TCGraphRouter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TCGraphRouter*>(&to_msg);
  auto& from = static_cast<const TCGraphRouter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tc_serialize.TCGraphRouter)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tc_router_stops__.MergeFrom(from._impl_.tc_router_stops__);
  _this->_impl_.tc_router_links_.MergeFrom(from._impl_.tc_router_links_);
  if (from._internal_has_graph_edges()) {
    _this->_internal_mutable_graph_edges()->::tc_serialize::EdgeVectorPB::MergeFrom(
        from._internal_graph_edges());
  }
  if (from._internal_has_graph_incidence_list()) {
    _this->_internal_mutable_graph_incidence_list()->::tc_serialize::IncidenceListPB::MergeFrom(
        from._internal_graph_incidence_list());
  }
  if (from._internal_edge_count() != 0) {
    _this->_internal_set_edge_count(from._internal_edge_count());
  }
  if (from._internal_vertex_id_count() != 0) {
    _this->_internal_set_vertex_id_count(from._internal_vertex_id_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TCGraphRouter::CopyFrom(const TCGraphRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tc_serialize.TCGraphRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCGraphRouter::IsInitialized() const {
  return true;
}

void TCGraphRouter::InternalSwap(TCGraphRouter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tc_router_stops__.InternalSwap(&other->_impl_.tc_router_stops__);
  _impl_.tc_router_links_.InternalSwap(&other->_impl_.tc_router_links_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TCGraphRouter, _impl_.vertex_id_count_)
      + sizeof(TCGraphRouter::_impl_.vertex_id_count_)
      - PROTOBUF_FIELD_OFFSET(TCGraphRouter, _impl_.graph_edges_)>(
          reinterpret_cast<char*>(&_impl_.graph_edges_),
          reinterpret_cast<char*>(&other->_impl_.graph_edges_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TCGraphRouter::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[7]);
}

// ===================================================================

class RouteIntDataPB::_Internal {
 public:
};

RouteIntDataPB::RouteIntDataPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tc_serialize.RouteIntDataPB)
}
RouteIntDataPB::RouteIntDataPB(const RouteIntDataPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RouteIntDataPB* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.weight_){}
    , decltype(_impl_.prev_edge_){}
    , decltype(_impl_.prev_edge_empty_){}
    , decltype(_impl_.data_empty_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.weight_, &from._impl_.weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.data_empty_) -
    reinterpret_cast<char*>(&_impl_.weight_)) + sizeof(_impl_.data_empty_));
  // @@protoc_insertion_point(copy_constructor:tc_serialize.RouteIntDataPB)
}

inline void RouteIntDataPB::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.weight_){0}
    , decltype(_impl_.prev_edge_){uint64_t{0u}}
    , decltype(_impl_.prev_edge_empty_){false}
    , decltype(_impl_.data_empty_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RouteIntDataPB::~RouteIntDataPB() {
  // @@protoc_insertion_point(destructor:tc_serialize.RouteIntDataPB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RouteIntDataPB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RouteIntDataPB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RouteIntDataPB::Clear() {
// @@protoc_insertion_point(message_clear_start:tc_serialize.RouteIntDataPB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.data_empty_) -
      reinterpret_cast<char*>(&_impl_.weight_)) + sizeof(_impl_.data_empty_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RouteIntDataPB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double weight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 prev_edge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.prev_edge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool prev_edge_empty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.prev_edge_empty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool data_empty = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.data_empty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RouteIntDataPB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tc_serialize.RouteIntDataPB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double weight = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_weight(), target);
  }

  // uint64 prev_edge = 2;
  if (this->_internal_prev_edge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_prev_edge(), target);
  }

  // bool prev_edge_empty = 3;
  if (this->_internal_prev_edge_empty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_prev_edge_empty(), target);
  }

  // bool data_empty = 4;
  if (this->_internal_data_empty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_data_empty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tc_serialize.RouteIntDataPB)
  return target;
}

size_t RouteIntDataPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tc_serialize.RouteIntDataPB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double weight = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    total_size += 1 + 8;
  }

  // uint64 prev_edge = 2;
  if (this->_internal_prev_edge() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_prev_edge());
  }

  // bool prev_edge_empty = 3;
  if (this->_internal_prev_edge_empty() != 0) {
    total_size += 1 + 1;
  }

  // bool data_empty = 4;
  if (this->_internal_data_empty() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RouteIntDataPB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RouteIntDataPB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RouteIntDataPB::GetClassData() const { return &_class_data_; }


void RouteIntDataPB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RouteIntDataPB*>(&to_msg);
  auto& from = static_cast<const RouteIntDataPB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tc_serialize.RouteIntDataPB)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = from._internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    _this->_internal_set_weight(from._internal_weight());
  }
  if (from._internal_prev_edge() != 0) {
    _this->_internal_set_prev_edge(from._internal_prev_edge());
  }
  if (from._internal_prev_edge_empty() != 0) {
    _this->_internal_set_prev_edge_empty(from._internal_prev_edge_empty());
  }
  if (from._internal_data_empty() != 0) {
    _this->_internal_set_data_empty(from._internal_data_empty());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RouteIntDataPB::CopyFrom(const RouteIntDataPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tc_serialize.RouteIntDataPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteIntDataPB::IsInitialized() const {
  return true;
}

void RouteIntDataPB::InternalSwap(RouteIntDataPB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RouteIntDataPB, _impl_.data_empty_)
      + sizeof(RouteIntDataPB::_impl_.data_empty_)
      - PROTOBUF_FIELD_OFFSET(RouteIntDataPB, _impl_.weight_)>(
          reinterpret_cast<char*>(&_impl_.weight_),
          reinterpret_cast<char*>(&other->_impl_.weight_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteIntDataPB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[8]);
}

// ===================================================================

class VertexCountListPB::_Internal {
 public:
};

VertexCountListPB::VertexCountListPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tc_serialize.VertexCountListPB)
}
VertexCountListPB::VertexCountListPB(const VertexCountListPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VertexCountListPB* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vertex_list_){from._impl_.vertex_list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tc_serialize.VertexCountListPB)
}

inline void VertexCountListPB::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vertex_list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VertexCountListPB::~VertexCountListPB() {
  // @@protoc_insertion_point(destructor:tc_serialize.VertexCountListPB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VertexCountListPB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vertex_list_.~RepeatedPtrField();
}

void VertexCountListPB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VertexCountListPB::Clear() {
// @@protoc_insertion_point(message_clear_start:tc_serialize.VertexCountListPB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vertex_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VertexCountListPB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tc_serialize.RouteIntDataPB vertex_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertex_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VertexCountListPB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tc_serialize.VertexCountListPB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tc_serialize.RouteIntDataPB vertex_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vertex_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_vertex_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tc_serialize.VertexCountListPB)
  return target;
}

size_t VertexCountListPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tc_serialize.VertexCountListPB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tc_serialize.RouteIntDataPB vertex_list = 1;
  total_size += 1UL * this->_internal_vertex_list_size();
  for (const auto& msg : this->_impl_.vertex_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VertexCountListPB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VertexCountListPB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VertexCountListPB::GetClassData() const { return &_class_data_; }


void VertexCountListPB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VertexCountListPB*>(&to_msg);
  auto& from = static_cast<const VertexCountListPB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tc_serialize.VertexCountListPB)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vertex_list_.MergeFrom(from._impl_.vertex_list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VertexCountListPB::CopyFrom(const VertexCountListPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tc_serialize.VertexCountListPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VertexCountListPB::IsInitialized() const {
  return true;
}

void VertexCountListPB::InternalSwap(VertexCountListPB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vertex_list_.InternalSwap(&other->_impl_.vertex_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VertexCountListPB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[9]);
}

// ===================================================================

class RoutesInternalDataListsPB::_Internal {
 public:
};

RoutesInternalDataListsPB::RoutesInternalDataListsPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tc_serialize.RoutesInternalDataListsPB)
}
RoutesInternalDataListsPB::RoutesInternalDataListsPB(const RoutesInternalDataListsPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoutesInternalDataListsPB* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.routes_list_){from._impl_.routes_list_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tc_serialize.RoutesInternalDataListsPB)
}

inline void RoutesInternalDataListsPB::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.routes_list_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoutesInternalDataListsPB::~RoutesInternalDataListsPB() {
  // @@protoc_insertion_point(destructor:tc_serialize.RoutesInternalDataListsPB)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutesInternalDataListsPB::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.routes_list_.~RepeatedPtrField();
}

void RoutesInternalDataListsPB::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoutesInternalDataListsPB::Clear() {
// @@protoc_insertion_point(message_clear_start:tc_serialize.RoutesInternalDataListsPB)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.routes_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutesInternalDataListsPB::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tc_serialize.VertexCountListPB routes_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutesInternalDataListsPB::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tc_serialize.RoutesInternalDataListsPB)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tc_serialize.VertexCountListPB routes_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_routes_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_routes_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tc_serialize.RoutesInternalDataListsPB)
  return target;
}

size_t RoutesInternalDataListsPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tc_serialize.RoutesInternalDataListsPB)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tc_serialize.VertexCountListPB routes_list = 1;
  total_size += 1UL * this->_internal_routes_list_size();
  for (const auto& msg : this->_impl_.routes_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutesInternalDataListsPB::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoutesInternalDataListsPB::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutesInternalDataListsPB::GetClassData() const { return &_class_data_; }


void RoutesInternalDataListsPB::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoutesInternalDataListsPB*>(&to_msg);
  auto& from = static_cast<const RoutesInternalDataListsPB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tc_serialize.RoutesInternalDataListsPB)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.routes_list_.MergeFrom(from._impl_.routes_list_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutesInternalDataListsPB::CopyFrom(const RoutesInternalDataListsPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tc_serialize.RoutesInternalDataListsPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutesInternalDataListsPB::IsInitialized() const {
  return true;
}

void RoutesInternalDataListsPB::InternalSwap(RoutesInternalDataListsPB* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.routes_list_.InternalSwap(&other->_impl_.routes_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutesInternalDataListsPB::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[10]);
}

// ===================================================================

class GraphRouterSettings::_Internal {
 public:
  static const ::tc_serialize::RoutingSettings& routing_settings(const GraphRouterSettings* msg);
  static const ::tc_serialize::RoutesInternalDataListsPB& router_routes_int_data(const GraphRouterSettings* msg);
  static const ::tc_serialize::TCGraphRouter& tc_graph_router(const GraphRouterSettings* msg);
};

const ::tc_serialize::RoutingSettings&
GraphRouterSettings::_Internal::routing_settings(const GraphRouterSettings* msg) {
  return *msg->_impl_.routing_settings_;
}
const ::tc_serialize::RoutesInternalDataListsPB&
GraphRouterSettings::_Internal::router_routes_int_data(const GraphRouterSettings* msg) {
  return *msg->_impl_.router_routes_int_data_;
}
const ::tc_serialize::TCGraphRouter&
GraphRouterSettings::_Internal::tc_graph_router(const GraphRouterSettings* msg) {
  return *msg->_impl_.tc_graph_router_;
}
GraphRouterSettings::GraphRouterSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tc_serialize.GraphRouterSettings)
}
GraphRouterSettings::GraphRouterSettings(const GraphRouterSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GraphRouterSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.routing_settings_){nullptr}
    , decltype(_impl_.router_routes_int_data_){nullptr}
    , decltype(_impl_.tc_graph_router_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_routing_settings()) {
    _this->_impl_.routing_settings_ = new ::tc_serialize::RoutingSettings(*from._impl_.routing_settings_);
  }
  if (from._internal_has_router_routes_int_data()) {
    _this->_impl_.router_routes_int_data_ = new ::tc_serialize::RoutesInternalDataListsPB(*from._impl_.router_routes_int_data_);
  }
  if (from._internal_has_tc_graph_router()) {
    _this->_impl_.tc_graph_router_ = new ::tc_serialize::TCGraphRouter(*from._impl_.tc_graph_router_);
  }
  // @@protoc_insertion_point(copy_constructor:tc_serialize.GraphRouterSettings)
}

inline void GraphRouterSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.routing_settings_){nullptr}
    , decltype(_impl_.router_routes_int_data_){nullptr}
    , decltype(_impl_.tc_graph_router_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GraphRouterSettings::~GraphRouterSettings() {
  // @@protoc_insertion_point(destructor:tc_serialize.GraphRouterSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GraphRouterSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.routing_settings_;
  if (this != internal_default_instance()) delete _impl_.router_routes_int_data_;
  if (this != internal_default_instance()) delete _impl_.tc_graph_router_;
}

void GraphRouterSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GraphRouterSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:tc_serialize.GraphRouterSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.routing_settings_ != nullptr) {
    delete _impl_.routing_settings_;
  }
  _impl_.routing_settings_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.router_routes_int_data_ != nullptr) {
    delete _impl_.router_routes_int_data_;
  }
  _impl_.router_routes_int_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.tc_graph_router_ != nullptr) {
    delete _impl_.tc_graph_router_;
  }
  _impl_.tc_graph_router_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphRouterSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tc_serialize.RoutingSettings routing_settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tc_serialize.RoutesInternalDataListsPB router_routes_int_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_router_routes_int_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tc_serialize.TCGraphRouter tc_graph_router = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tc_graph_router(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphRouterSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tc_serialize.GraphRouterSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tc_serialize.RoutingSettings routing_settings = 1;
  if (this->_internal_has_routing_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::routing_settings(this),
        _Internal::routing_settings(this).GetCachedSize(), target, stream);
  }

  // .tc_serialize.RoutesInternalDataListsPB router_routes_int_data = 2;
  if (this->_internal_has_router_routes_int_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::router_routes_int_data(this),
        _Internal::router_routes_int_data(this).GetCachedSize(), target, stream);
  }

  // .tc_serialize.TCGraphRouter tc_graph_router = 3;
  if (this->_internal_has_tc_graph_router()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::tc_graph_router(this),
        _Internal::tc_graph_router(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tc_serialize.GraphRouterSettings)
  return target;
}

size_t GraphRouterSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tc_serialize.GraphRouterSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tc_serialize.RoutingSettings routing_settings = 1;
  if (this->_internal_has_routing_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.routing_settings_);
  }

  // .tc_serialize.RoutesInternalDataListsPB router_routes_int_data = 2;
  if (this->_internal_has_router_routes_int_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.router_routes_int_data_);
  }

  // .tc_serialize.TCGraphRouter tc_graph_router = 3;
  if (this->_internal_has_tc_graph_router()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tc_graph_router_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphRouterSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GraphRouterSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphRouterSettings::GetClassData() const { return &_class_data_; }


void GraphRouterSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GraphRouterSettings*>(&to_msg);
  auto& from = static_cast<const GraphRouterSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tc_serialize.GraphRouterSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_routing_settings()) {
    _this->_internal_mutable_routing_settings()->::tc_serialize::RoutingSettings::MergeFrom(
        from._internal_routing_settings());
  }
  if (from._internal_has_router_routes_int_data()) {
    _this->_internal_mutable_router_routes_int_data()->::tc_serialize::RoutesInternalDataListsPB::MergeFrom(
        from._internal_router_routes_int_data());
  }
  if (from._internal_has_tc_graph_router()) {
    _this->_internal_mutable_tc_graph_router()->::tc_serialize::TCGraphRouter::MergeFrom(
        from._internal_tc_graph_router());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphRouterSettings::CopyFrom(const GraphRouterSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tc_serialize.GraphRouterSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphRouterSettings::IsInitialized() const {
  return true;
}

void GraphRouterSettings::InternalSwap(GraphRouterSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphRouterSettings, _impl_.tc_graph_router_)
      + sizeof(GraphRouterSettings::_impl_.tc_graph_router_)
      - PROTOBUF_FIELD_OFFSET(GraphRouterSettings, _impl_.routing_settings_)>(
          reinterpret_cast<char*>(&_impl_.routing_settings_),
          reinterpret_cast<char*>(&other->_impl_.routing_settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphRouterSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5frouter_2eproto_getter, &descriptor_table_transport_5frouter_2eproto_once,
      file_level_metadata_transport_5frouter_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tc_serialize
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tc_serialize::RoutingSettings*
Arena::CreateMaybeMessage< ::tc_serialize::RoutingSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tc_serialize::RoutingSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::tc_serialize::StopOnRoutePB*
Arena::CreateMaybeMessage< ::tc_serialize::StopOnRoutePB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tc_serialize::StopOnRoutePB >(arena);
}
template<> PROTOBUF_NOINLINE ::tc_serialize::TwoStopsLinkPB*
Arena::CreateMaybeMessage< ::tc_serialize::TwoStopsLinkPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tc_serialize::TwoStopsLinkPB >(arena);
}
template<> PROTOBUF_NOINLINE ::tc_serialize::EdgePB*
Arena::CreateMaybeMessage< ::tc_serialize::EdgePB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tc_serialize::EdgePB >(arena);
}
template<> PROTOBUF_NOINLINE ::tc_serialize::EdgeVectorPB*
Arena::CreateMaybeMessage< ::tc_serialize::EdgeVectorPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tc_serialize::EdgeVectorPB >(arena);
}
template<> PROTOBUF_NOINLINE ::tc_serialize::IncListPB*
Arena::CreateMaybeMessage< ::tc_serialize::IncListPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tc_serialize::IncListPB >(arena);
}
template<> PROTOBUF_NOINLINE ::tc_serialize::IncidenceListPB*
Arena::CreateMaybeMessage< ::tc_serialize::IncidenceListPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tc_serialize::IncidenceListPB >(arena);
}
template<> PROTOBUF_NOINLINE ::tc_serialize::TCGraphRouter*
Arena::CreateMaybeMessage< ::tc_serialize::TCGraphRouter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tc_serialize::TCGraphRouter >(arena);
}
template<> PROTOBUF_NOINLINE ::tc_serialize::RouteIntDataPB*
Arena::CreateMaybeMessage< ::tc_serialize::RouteIntDataPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tc_serialize::RouteIntDataPB >(arena);
}
template<> PROTOBUF_NOINLINE ::tc_serialize::VertexCountListPB*
Arena::CreateMaybeMessage< ::tc_serialize::VertexCountListPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tc_serialize::VertexCountListPB >(arena);
}
template<> PROTOBUF_NOINLINE ::tc_serialize::RoutesInternalDataListsPB*
Arena::CreateMaybeMessage< ::tc_serialize::RoutesInternalDataListsPB >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tc_serialize::RoutesInternalDataListsPB >(arena);
}
template<> PROTOBUF_NOINLINE ::tc_serialize::GraphRouterSettings*
Arena::CreateMaybeMessage< ::tc_serialize::GraphRouterSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tc_serialize::GraphRouterSettings >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
