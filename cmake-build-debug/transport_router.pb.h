// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_router.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5frouter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5frouter_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5frouter_2eproto;
namespace tc_serialize {
class EdgePB;
struct EdgePBDefaultTypeInternal;
extern EdgePBDefaultTypeInternal _EdgePB_default_instance_;
class EdgeVectorPB;
struct EdgeVectorPBDefaultTypeInternal;
extern EdgeVectorPBDefaultTypeInternal _EdgeVectorPB_default_instance_;
class GraphRouterSettings;
struct GraphRouterSettingsDefaultTypeInternal;
extern GraphRouterSettingsDefaultTypeInternal _GraphRouterSettings_default_instance_;
class IncListPB;
struct IncListPBDefaultTypeInternal;
extern IncListPBDefaultTypeInternal _IncListPB_default_instance_;
class IncidenceListPB;
struct IncidenceListPBDefaultTypeInternal;
extern IncidenceListPBDefaultTypeInternal _IncidenceListPB_default_instance_;
class RouteIntDataPB;
struct RouteIntDataPBDefaultTypeInternal;
extern RouteIntDataPBDefaultTypeInternal _RouteIntDataPB_default_instance_;
class RoutesInternalDataListsPB;
struct RoutesInternalDataListsPBDefaultTypeInternal;
extern RoutesInternalDataListsPBDefaultTypeInternal _RoutesInternalDataListsPB_default_instance_;
class RoutingSettings;
struct RoutingSettingsDefaultTypeInternal;
extern RoutingSettingsDefaultTypeInternal _RoutingSettings_default_instance_;
class StopOnRoutePB;
struct StopOnRoutePBDefaultTypeInternal;
extern StopOnRoutePBDefaultTypeInternal _StopOnRoutePB_default_instance_;
class TCGraphRouter;
struct TCGraphRouterDefaultTypeInternal;
extern TCGraphRouterDefaultTypeInternal _TCGraphRouter_default_instance_;
class TwoStopsLinkPB;
struct TwoStopsLinkPBDefaultTypeInternal;
extern TwoStopsLinkPBDefaultTypeInternal _TwoStopsLinkPB_default_instance_;
class VertexCountListPB;
struct VertexCountListPBDefaultTypeInternal;
extern VertexCountListPBDefaultTypeInternal _VertexCountListPB_default_instance_;
}  // namespace tc_serialize
PROTOBUF_NAMESPACE_OPEN
template<> ::tc_serialize::EdgePB* Arena::CreateMaybeMessage<::tc_serialize::EdgePB>(Arena*);
template<> ::tc_serialize::EdgeVectorPB* Arena::CreateMaybeMessage<::tc_serialize::EdgeVectorPB>(Arena*);
template<> ::tc_serialize::GraphRouterSettings* Arena::CreateMaybeMessage<::tc_serialize::GraphRouterSettings>(Arena*);
template<> ::tc_serialize::IncListPB* Arena::CreateMaybeMessage<::tc_serialize::IncListPB>(Arena*);
template<> ::tc_serialize::IncidenceListPB* Arena::CreateMaybeMessage<::tc_serialize::IncidenceListPB>(Arena*);
template<> ::tc_serialize::RouteIntDataPB* Arena::CreateMaybeMessage<::tc_serialize::RouteIntDataPB>(Arena*);
template<> ::tc_serialize::RoutesInternalDataListsPB* Arena::CreateMaybeMessage<::tc_serialize::RoutesInternalDataListsPB>(Arena*);
template<> ::tc_serialize::RoutingSettings* Arena::CreateMaybeMessage<::tc_serialize::RoutingSettings>(Arena*);
template<> ::tc_serialize::StopOnRoutePB* Arena::CreateMaybeMessage<::tc_serialize::StopOnRoutePB>(Arena*);
template<> ::tc_serialize::TCGraphRouter* Arena::CreateMaybeMessage<::tc_serialize::TCGraphRouter>(Arena*);
template<> ::tc_serialize::TwoStopsLinkPB* Arena::CreateMaybeMessage<::tc_serialize::TwoStopsLinkPB>(Arena*);
template<> ::tc_serialize::VertexCountListPB* Arena::CreateMaybeMessage<::tc_serialize::VertexCountListPB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tc_serialize {

// ===================================================================

class RoutingSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.RoutingSettings) */ {
 public:
  inline RoutingSettings() : RoutingSettings(nullptr) {}
  ~RoutingSettings() override;
  explicit PROTOBUF_CONSTEXPR RoutingSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutingSettings(const RoutingSettings& from);
  RoutingSettings(RoutingSettings&& from) noexcept
    : RoutingSettings() {
    *this = ::std::move(from);
  }

  inline RoutingSettings& operator=(const RoutingSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingSettings& operator=(RoutingSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutingSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutingSettings* internal_default_instance() {
    return reinterpret_cast<const RoutingSettings*>(
               &_RoutingSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoutingSettings& a, RoutingSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutingSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoutingSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoutingSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoutingSettings& from) {
    RoutingSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.RoutingSettings";
  }
  protected:
  explicit RoutingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusWaitTimeFieldNumber = 1,
    kBusVelocityFieldNumber = 2,
  };
  // int64 bus_wait_time = 1;
  void clear_bus_wait_time();
  int64_t bus_wait_time() const;
  void set_bus_wait_time(int64_t value);
  private:
  int64_t _internal_bus_wait_time() const;
  void _internal_set_bus_wait_time(int64_t value);
  public:

  // double bus_velocity = 2;
  void clear_bus_velocity();
  double bus_velocity() const;
  void set_bus_velocity(double value);
  private:
  double _internal_bus_velocity() const;
  void _internal_set_bus_velocity(double value);
  public:

  // @@protoc_insertion_point(class_scope:tc_serialize.RoutingSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t bus_wait_time_;
    double bus_velocity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class StopOnRoutePB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.StopOnRoutePB) */ {
 public:
  inline StopOnRoutePB() : StopOnRoutePB(nullptr) {}
  ~StopOnRoutePB() override;
  explicit PROTOBUF_CONSTEXPR StopOnRoutePB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopOnRoutePB(const StopOnRoutePB& from);
  StopOnRoutePB(StopOnRoutePB&& from) noexcept
    : StopOnRoutePB() {
    *this = ::std::move(from);
  }

  inline StopOnRoutePB& operator=(const StopOnRoutePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopOnRoutePB& operator=(StopOnRoutePB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopOnRoutePB& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopOnRoutePB* internal_default_instance() {
    return reinterpret_cast<const StopOnRoutePB*>(
               &_StopOnRoutePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StopOnRoutePB& a, StopOnRoutePB& b) {
    a.Swap(&b);
  }
  inline void Swap(StopOnRoutePB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopOnRoutePB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopOnRoutePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopOnRoutePB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopOnRoutePB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopOnRoutePB& from) {
    StopOnRoutePB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopOnRoutePB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.StopOnRoutePB";
  }
  protected:
  explicit StopOnRoutePB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusNameFieldNumber = 3,
    kStopNumberFieldNumber = 1,
    kVertexIdFieldNumber = 4,
    kStopIdFieldNumber = 2,
  };
  // string bus_name = 3;
  void clear_bus_name();
  const std::string& bus_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bus_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bus_name();
  PROTOBUF_NODISCARD std::string* release_bus_name();
  void set_allocated_bus_name(std::string* bus_name);
  private:
  const std::string& _internal_bus_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bus_name(const std::string& value);
  std::string* _internal_mutable_bus_name();
  public:

  // uint64 stop_number = 1;
  void clear_stop_number();
  uint64_t stop_number() const;
  void set_stop_number(uint64_t value);
  private:
  uint64_t _internal_stop_number() const;
  void _internal_set_stop_number(uint64_t value);
  public:

  // uint64 vertex_id = 4;
  void clear_vertex_id();
  uint64_t vertex_id() const;
  void set_vertex_id(uint64_t value);
  private:
  uint64_t _internal_vertex_id() const;
  void _internal_set_vertex_id(uint64_t value);
  public:

  // uint32 stop_id = 2;
  void clear_stop_id();
  uint32_t stop_id() const;
  void set_stop_id(uint32_t value);
  private:
  uint32_t _internal_stop_id() const;
  void _internal_set_stop_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tc_serialize.StopOnRoutePB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bus_name_;
    uint64_t stop_number_;
    uint64_t vertex_id_;
    uint32_t stop_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class TwoStopsLinkPB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.TwoStopsLinkPB) */ {
 public:
  inline TwoStopsLinkPB() : TwoStopsLinkPB(nullptr) {}
  ~TwoStopsLinkPB() override;
  explicit PROTOBUF_CONSTEXPR TwoStopsLinkPB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TwoStopsLinkPB(const TwoStopsLinkPB& from);
  TwoStopsLinkPB(TwoStopsLinkPB&& from) noexcept
    : TwoStopsLinkPB() {
    *this = ::std::move(from);
  }

  inline TwoStopsLinkPB& operator=(const TwoStopsLinkPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline TwoStopsLinkPB& operator=(TwoStopsLinkPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TwoStopsLinkPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const TwoStopsLinkPB* internal_default_instance() {
    return reinterpret_cast<const TwoStopsLinkPB*>(
               &_TwoStopsLinkPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TwoStopsLinkPB& a, TwoStopsLinkPB& b) {
    a.Swap(&b);
  }
  inline void Swap(TwoStopsLinkPB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TwoStopsLinkPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TwoStopsLinkPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TwoStopsLinkPB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TwoStopsLinkPB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TwoStopsLinkPB& from) {
    TwoStopsLinkPB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TwoStopsLinkPB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.TwoStopsLinkPB";
  }
  protected:
  explicit TwoStopsLinkPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusNameFieldNumber = 1,
    kStopFromFieldNumber = 2,
    kStopToFieldNumber = 3,
    kNumOfStopsFieldNumber = 4,
    kEdgeIdFieldNumber = 5,
  };
  // string bus_name = 1;
  void clear_bus_name();
  const std::string& bus_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bus_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bus_name();
  PROTOBUF_NODISCARD std::string* release_bus_name();
  void set_allocated_bus_name(std::string* bus_name);
  private:
  const std::string& _internal_bus_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bus_name(const std::string& value);
  std::string* _internal_mutable_bus_name();
  public:

  // uint64 stop_from = 2;
  void clear_stop_from();
  uint64_t stop_from() const;
  void set_stop_from(uint64_t value);
  private:
  uint64_t _internal_stop_from() const;
  void _internal_set_stop_from(uint64_t value);
  public:

  // uint64 stop_to = 3;
  void clear_stop_to();
  uint64_t stop_to() const;
  void set_stop_to(uint64_t value);
  private:
  uint64_t _internal_stop_to() const;
  void _internal_set_stop_to(uint64_t value);
  public:

  // uint64 num_of_stops = 4;
  void clear_num_of_stops();
  uint64_t num_of_stops() const;
  void set_num_of_stops(uint64_t value);
  private:
  uint64_t _internal_num_of_stops() const;
  void _internal_set_num_of_stops(uint64_t value);
  public:

  // uint64 edge_id = 5;
  void clear_edge_id();
  uint64_t edge_id() const;
  void set_edge_id(uint64_t value);
  private:
  uint64_t _internal_edge_id() const;
  void _internal_set_edge_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tc_serialize.TwoStopsLinkPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bus_name_;
    uint64_t stop_from_;
    uint64_t stop_to_;
    uint64_t num_of_stops_;
    uint64_t edge_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class EdgePB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.EdgePB) */ {
 public:
  inline EdgePB() : EdgePB(nullptr) {}
  ~EdgePB() override;
  explicit PROTOBUF_CONSTEXPR EdgePB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdgePB(const EdgePB& from);
  EdgePB(EdgePB&& from) noexcept
    : EdgePB() {
    *this = ::std::move(from);
  }

  inline EdgePB& operator=(const EdgePB& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgePB& operator=(EdgePB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgePB& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdgePB* internal_default_instance() {
    return reinterpret_cast<const EdgePB*>(
               &_EdgePB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EdgePB& a, EdgePB& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgePB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgePB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdgePB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdgePB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdgePB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EdgePB& from) {
    EdgePB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgePB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.EdgePB";
  }
  protected:
  explicit EdgePB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kWeightFieldNumber = 3,
  };
  // uint64 from = 1;
  void clear_from();
  uint64_t from() const;
  void set_from(uint64_t value);
  private:
  uint64_t _internal_from() const;
  void _internal_set_from(uint64_t value);
  public:

  // uint64 to = 2;
  void clear_to();
  uint64_t to() const;
  void set_to(uint64_t value);
  private:
  uint64_t _internal_to() const;
  void _internal_set_to(uint64_t value);
  public:

  // double weight = 3;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:tc_serialize.EdgePB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t from_;
    uint64_t to_;
    double weight_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class EdgeVectorPB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.EdgeVectorPB) */ {
 public:
  inline EdgeVectorPB() : EdgeVectorPB(nullptr) {}
  ~EdgeVectorPB() override;
  explicit PROTOBUF_CONSTEXPR EdgeVectorPB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdgeVectorPB(const EdgeVectorPB& from);
  EdgeVectorPB(EdgeVectorPB&& from) noexcept
    : EdgeVectorPB() {
    *this = ::std::move(from);
  }

  inline EdgeVectorPB& operator=(const EdgeVectorPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeVectorPB& operator=(EdgeVectorPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgeVectorPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdgeVectorPB* internal_default_instance() {
    return reinterpret_cast<const EdgeVectorPB*>(
               &_EdgeVectorPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EdgeVectorPB& a, EdgeVectorPB& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeVectorPB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeVectorPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdgeVectorPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdgeVectorPB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdgeVectorPB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EdgeVectorPB& from) {
    EdgeVectorPB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeVectorPB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.EdgeVectorPB";
  }
  protected:
  explicit EdgeVectorPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgesFieldNumber = 1,
  };
  // repeated .tc_serialize.EdgePB edges = 1;
  int edges_size() const;
  private:
  int _internal_edges_size() const;
  public:
  void clear_edges();
  ::tc_serialize::EdgePB* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::EdgePB >*
      mutable_edges();
  private:
  const ::tc_serialize::EdgePB& _internal_edges(int index) const;
  ::tc_serialize::EdgePB* _internal_add_edges();
  public:
  const ::tc_serialize::EdgePB& edges(int index) const;
  ::tc_serialize::EdgePB* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::EdgePB >&
      edges() const;

  // @@protoc_insertion_point(class_scope:tc_serialize.EdgeVectorPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::EdgePB > edges_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class IncListPB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.IncListPB) */ {
 public:
  inline IncListPB() : IncListPB(nullptr) {}
  ~IncListPB() override;
  explicit PROTOBUF_CONSTEXPR IncListPB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IncListPB(const IncListPB& from);
  IncListPB(IncListPB&& from) noexcept
    : IncListPB() {
    *this = ::std::move(from);
  }

  inline IncListPB& operator=(const IncListPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncListPB& operator=(IncListPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IncListPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncListPB* internal_default_instance() {
    return reinterpret_cast<const IncListPB*>(
               &_IncListPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(IncListPB& a, IncListPB& b) {
    a.Swap(&b);
  }
  inline void Swap(IncListPB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncListPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncListPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IncListPB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IncListPB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IncListPB& from) {
    IncListPB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncListPB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.IncListPB";
  }
  protected:
  explicit IncListPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated uint64 list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  private:
  uint64_t _internal_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_list() const;
  void _internal_add_list(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_list();
  public:
  uint64_t list(int index) const;
  void set_list(int index, uint64_t value);
  void add_list(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:tc_serialize.IncListPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > list_;
    mutable std::atomic<int> _list_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class IncidenceListPB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.IncidenceListPB) */ {
 public:
  inline IncidenceListPB() : IncidenceListPB(nullptr) {}
  ~IncidenceListPB() override;
  explicit PROTOBUF_CONSTEXPR IncidenceListPB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IncidenceListPB(const IncidenceListPB& from);
  IncidenceListPB(IncidenceListPB&& from) noexcept
    : IncidenceListPB() {
    *this = ::std::move(from);
  }

  inline IncidenceListPB& operator=(const IncidenceListPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncidenceListPB& operator=(IncidenceListPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IncidenceListPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncidenceListPB* internal_default_instance() {
    return reinterpret_cast<const IncidenceListPB*>(
               &_IncidenceListPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IncidenceListPB& a, IncidenceListPB& b) {
    a.Swap(&b);
  }
  inline void Swap(IncidenceListPB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncidenceListPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncidenceListPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IncidenceListPB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IncidenceListPB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IncidenceListPB& from) {
    IncidenceListPB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IncidenceListPB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.IncidenceListPB";
  }
  protected:
  explicit IncidenceListPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListsFieldNumber = 1,
  };
  // repeated .tc_serialize.IncListPB lists = 1;
  int lists_size() const;
  private:
  int _internal_lists_size() const;
  public:
  void clear_lists();
  ::tc_serialize::IncListPB* mutable_lists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::IncListPB >*
      mutable_lists();
  private:
  const ::tc_serialize::IncListPB& _internal_lists(int index) const;
  ::tc_serialize::IncListPB* _internal_add_lists();
  public:
  const ::tc_serialize::IncListPB& lists(int index) const;
  ::tc_serialize::IncListPB* add_lists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::IncListPB >&
      lists() const;

  // @@protoc_insertion_point(class_scope:tc_serialize.IncidenceListPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::IncListPB > lists_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class TCGraphRouter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.TCGraphRouter) */ {
 public:
  inline TCGraphRouter() : TCGraphRouter(nullptr) {}
  ~TCGraphRouter() override;
  explicit PROTOBUF_CONSTEXPR TCGraphRouter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TCGraphRouter(const TCGraphRouter& from);
  TCGraphRouter(TCGraphRouter&& from) noexcept
    : TCGraphRouter() {
    *this = ::std::move(from);
  }

  inline TCGraphRouter& operator=(const TCGraphRouter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TCGraphRouter& operator=(TCGraphRouter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TCGraphRouter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TCGraphRouter* internal_default_instance() {
    return reinterpret_cast<const TCGraphRouter*>(
               &_TCGraphRouter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TCGraphRouter& a, TCGraphRouter& b) {
    a.Swap(&b);
  }
  inline void Swap(TCGraphRouter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TCGraphRouter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TCGraphRouter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TCGraphRouter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TCGraphRouter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TCGraphRouter& from) {
    TCGraphRouter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TCGraphRouter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.TCGraphRouter";
  }
  protected:
  explicit TCGraphRouter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTcRouterStopsFieldNumber = 1,
    kTcRouterLinksFieldNumber = 2,
    kGraphEdgesFieldNumber = 5,
    kGraphIncidenceListFieldNumber = 6,
    kEdgeCountFieldNumber = 3,
    kVertexIdCountFieldNumber = 4,
  };
  // repeated .tc_serialize.StopOnRoutePB tc_router_stops_ = 1;
  int tc_router_stops__size() const;
  private:
  int _internal_tc_router_stops__size() const;
  public:
  void clear_tc_router_stops_();
  ::tc_serialize::StopOnRoutePB* mutable_tc_router_stops_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::StopOnRoutePB >*
      mutable_tc_router_stops_();
  private:
  const ::tc_serialize::StopOnRoutePB& _internal_tc_router_stops_(int index) const;
  ::tc_serialize::StopOnRoutePB* _internal_add_tc_router_stops_();
  public:
  const ::tc_serialize::StopOnRoutePB& tc_router_stops_(int index) const;
  ::tc_serialize::StopOnRoutePB* add_tc_router_stops_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::StopOnRoutePB >&
      tc_router_stops_() const;

  // repeated .tc_serialize.TwoStopsLinkPB tc_router_links = 2;
  int tc_router_links_size() const;
  private:
  int _internal_tc_router_links_size() const;
  public:
  void clear_tc_router_links();
  ::tc_serialize::TwoStopsLinkPB* mutable_tc_router_links(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::TwoStopsLinkPB >*
      mutable_tc_router_links();
  private:
  const ::tc_serialize::TwoStopsLinkPB& _internal_tc_router_links(int index) const;
  ::tc_serialize::TwoStopsLinkPB* _internal_add_tc_router_links();
  public:
  const ::tc_serialize::TwoStopsLinkPB& tc_router_links(int index) const;
  ::tc_serialize::TwoStopsLinkPB* add_tc_router_links();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::TwoStopsLinkPB >&
      tc_router_links() const;

  // .tc_serialize.EdgeVectorPB graph_edges = 5;
  bool has_graph_edges() const;
  private:
  bool _internal_has_graph_edges() const;
  public:
  void clear_graph_edges();
  const ::tc_serialize::EdgeVectorPB& graph_edges() const;
  PROTOBUF_NODISCARD ::tc_serialize::EdgeVectorPB* release_graph_edges();
  ::tc_serialize::EdgeVectorPB* mutable_graph_edges();
  void set_allocated_graph_edges(::tc_serialize::EdgeVectorPB* graph_edges);
  private:
  const ::tc_serialize::EdgeVectorPB& _internal_graph_edges() const;
  ::tc_serialize::EdgeVectorPB* _internal_mutable_graph_edges();
  public:
  void unsafe_arena_set_allocated_graph_edges(
      ::tc_serialize::EdgeVectorPB* graph_edges);
  ::tc_serialize::EdgeVectorPB* unsafe_arena_release_graph_edges();

  // .tc_serialize.IncidenceListPB graph_incidence_list = 6;
  bool has_graph_incidence_list() const;
  private:
  bool _internal_has_graph_incidence_list() const;
  public:
  void clear_graph_incidence_list();
  const ::tc_serialize::IncidenceListPB& graph_incidence_list() const;
  PROTOBUF_NODISCARD ::tc_serialize::IncidenceListPB* release_graph_incidence_list();
  ::tc_serialize::IncidenceListPB* mutable_graph_incidence_list();
  void set_allocated_graph_incidence_list(::tc_serialize::IncidenceListPB* graph_incidence_list);
  private:
  const ::tc_serialize::IncidenceListPB& _internal_graph_incidence_list() const;
  ::tc_serialize::IncidenceListPB* _internal_mutable_graph_incidence_list();
  public:
  void unsafe_arena_set_allocated_graph_incidence_list(
      ::tc_serialize::IncidenceListPB* graph_incidence_list);
  ::tc_serialize::IncidenceListPB* unsafe_arena_release_graph_incidence_list();

  // uint64 edge_count = 3;
  void clear_edge_count();
  uint64_t edge_count() const;
  void set_edge_count(uint64_t value);
  private:
  uint64_t _internal_edge_count() const;
  void _internal_set_edge_count(uint64_t value);
  public:

  // uint64 vertex_id_count = 4;
  void clear_vertex_id_count();
  uint64_t vertex_id_count() const;
  void set_vertex_id_count(uint64_t value);
  private:
  uint64_t _internal_vertex_id_count() const;
  void _internal_set_vertex_id_count(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tc_serialize.TCGraphRouter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::StopOnRoutePB > tc_router_stops__;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::TwoStopsLinkPB > tc_router_links_;
    ::tc_serialize::EdgeVectorPB* graph_edges_;
    ::tc_serialize::IncidenceListPB* graph_incidence_list_;
    uint64_t edge_count_;
    uint64_t vertex_id_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class RouteIntDataPB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.RouteIntDataPB) */ {
 public:
  inline RouteIntDataPB() : RouteIntDataPB(nullptr) {}
  ~RouteIntDataPB() override;
  explicit PROTOBUF_CONSTEXPR RouteIntDataPB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteIntDataPB(const RouteIntDataPB& from);
  RouteIntDataPB(RouteIntDataPB&& from) noexcept
    : RouteIntDataPB() {
    *this = ::std::move(from);
  }

  inline RouteIntDataPB& operator=(const RouteIntDataPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteIntDataPB& operator=(RouteIntDataPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteIntDataPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteIntDataPB* internal_default_instance() {
    return reinterpret_cast<const RouteIntDataPB*>(
               &_RouteIntDataPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RouteIntDataPB& a, RouteIntDataPB& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteIntDataPB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteIntDataPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteIntDataPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteIntDataPB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteIntDataPB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteIntDataPB& from) {
    RouteIntDataPB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteIntDataPB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.RouteIntDataPB";
  }
  protected:
  explicit RouteIntDataPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWeightFieldNumber = 1,
    kPrevEdgeFieldNumber = 2,
    kPrevEdgeEmptyFieldNumber = 3,
    kDataEmptyFieldNumber = 4,
  };
  // double weight = 1;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // uint64 prev_edge = 2;
  void clear_prev_edge();
  uint64_t prev_edge() const;
  void set_prev_edge(uint64_t value);
  private:
  uint64_t _internal_prev_edge() const;
  void _internal_set_prev_edge(uint64_t value);
  public:

  // bool prev_edge_empty = 3;
  void clear_prev_edge_empty();
  bool prev_edge_empty() const;
  void set_prev_edge_empty(bool value);
  private:
  bool _internal_prev_edge_empty() const;
  void _internal_set_prev_edge_empty(bool value);
  public:

  // bool data_empty = 4;
  void clear_data_empty();
  bool data_empty() const;
  void set_data_empty(bool value);
  private:
  bool _internal_data_empty() const;
  void _internal_set_data_empty(bool value);
  public:

  // @@protoc_insertion_point(class_scope:tc_serialize.RouteIntDataPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double weight_;
    uint64_t prev_edge_;
    bool prev_edge_empty_;
    bool data_empty_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class VertexCountListPB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.VertexCountListPB) */ {
 public:
  inline VertexCountListPB() : VertexCountListPB(nullptr) {}
  ~VertexCountListPB() override;
  explicit PROTOBUF_CONSTEXPR VertexCountListPB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VertexCountListPB(const VertexCountListPB& from);
  VertexCountListPB(VertexCountListPB&& from) noexcept
    : VertexCountListPB() {
    *this = ::std::move(from);
  }

  inline VertexCountListPB& operator=(const VertexCountListPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline VertexCountListPB& operator=(VertexCountListPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VertexCountListPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const VertexCountListPB* internal_default_instance() {
    return reinterpret_cast<const VertexCountListPB*>(
               &_VertexCountListPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(VertexCountListPB& a, VertexCountListPB& b) {
    a.Swap(&b);
  }
  inline void Swap(VertexCountListPB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VertexCountListPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VertexCountListPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VertexCountListPB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VertexCountListPB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VertexCountListPB& from) {
    VertexCountListPB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VertexCountListPB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.VertexCountListPB";
  }
  protected:
  explicit VertexCountListPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVertexListFieldNumber = 1,
  };
  // repeated .tc_serialize.RouteIntDataPB vertex_list = 1;
  int vertex_list_size() const;
  private:
  int _internal_vertex_list_size() const;
  public:
  void clear_vertex_list();
  ::tc_serialize::RouteIntDataPB* mutable_vertex_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::RouteIntDataPB >*
      mutable_vertex_list();
  private:
  const ::tc_serialize::RouteIntDataPB& _internal_vertex_list(int index) const;
  ::tc_serialize::RouteIntDataPB* _internal_add_vertex_list();
  public:
  const ::tc_serialize::RouteIntDataPB& vertex_list(int index) const;
  ::tc_serialize::RouteIntDataPB* add_vertex_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::RouteIntDataPB >&
      vertex_list() const;

  // @@protoc_insertion_point(class_scope:tc_serialize.VertexCountListPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::RouteIntDataPB > vertex_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class RoutesInternalDataListsPB final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.RoutesInternalDataListsPB) */ {
 public:
  inline RoutesInternalDataListsPB() : RoutesInternalDataListsPB(nullptr) {}
  ~RoutesInternalDataListsPB() override;
  explicit PROTOBUF_CONSTEXPR RoutesInternalDataListsPB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutesInternalDataListsPB(const RoutesInternalDataListsPB& from);
  RoutesInternalDataListsPB(RoutesInternalDataListsPB&& from) noexcept
    : RoutesInternalDataListsPB() {
    *this = ::std::move(from);
  }

  inline RoutesInternalDataListsPB& operator=(const RoutesInternalDataListsPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutesInternalDataListsPB& operator=(RoutesInternalDataListsPB&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutesInternalDataListsPB& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutesInternalDataListsPB* internal_default_instance() {
    return reinterpret_cast<const RoutesInternalDataListsPB*>(
               &_RoutesInternalDataListsPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RoutesInternalDataListsPB& a, RoutesInternalDataListsPB& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutesInternalDataListsPB* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutesInternalDataListsPB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutesInternalDataListsPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoutesInternalDataListsPB>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoutesInternalDataListsPB& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoutesInternalDataListsPB& from) {
    RoutesInternalDataListsPB::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutesInternalDataListsPB* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.RoutesInternalDataListsPB";
  }
  protected:
  explicit RoutesInternalDataListsPB(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesListFieldNumber = 1,
  };
  // repeated .tc_serialize.VertexCountListPB routes_list = 1;
  int routes_list_size() const;
  private:
  int _internal_routes_list_size() const;
  public:
  void clear_routes_list();
  ::tc_serialize::VertexCountListPB* mutable_routes_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::VertexCountListPB >*
      mutable_routes_list();
  private:
  const ::tc_serialize::VertexCountListPB& _internal_routes_list(int index) const;
  ::tc_serialize::VertexCountListPB* _internal_add_routes_list();
  public:
  const ::tc_serialize::VertexCountListPB& routes_list(int index) const;
  ::tc_serialize::VertexCountListPB* add_routes_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::VertexCountListPB >&
      routes_list() const;

  // @@protoc_insertion_point(class_scope:tc_serialize.RoutesInternalDataListsPB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::VertexCountListPB > routes_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// -------------------------------------------------------------------

class GraphRouterSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tc_serialize.GraphRouterSettings) */ {
 public:
  inline GraphRouterSettings() : GraphRouterSettings(nullptr) {}
  ~GraphRouterSettings() override;
  explicit PROTOBUF_CONSTEXPR GraphRouterSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GraphRouterSettings(const GraphRouterSettings& from);
  GraphRouterSettings(GraphRouterSettings&& from) noexcept
    : GraphRouterSettings() {
    *this = ::std::move(from);
  }

  inline GraphRouterSettings& operator=(const GraphRouterSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphRouterSettings& operator=(GraphRouterSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GraphRouterSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const GraphRouterSettings* internal_default_instance() {
    return reinterpret_cast<const GraphRouterSettings*>(
               &_GraphRouterSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GraphRouterSettings& a, GraphRouterSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphRouterSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphRouterSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GraphRouterSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GraphRouterSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GraphRouterSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GraphRouterSettings& from) {
    GraphRouterSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphRouterSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tc_serialize.GraphRouterSettings";
  }
  protected:
  explicit GraphRouterSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutingSettingsFieldNumber = 1,
    kRouterRoutesIntDataFieldNumber = 2,
    kTcGraphRouterFieldNumber = 3,
  };
  // .tc_serialize.RoutingSettings routing_settings = 1;
  bool has_routing_settings() const;
  private:
  bool _internal_has_routing_settings() const;
  public:
  void clear_routing_settings();
  const ::tc_serialize::RoutingSettings& routing_settings() const;
  PROTOBUF_NODISCARD ::tc_serialize::RoutingSettings* release_routing_settings();
  ::tc_serialize::RoutingSettings* mutable_routing_settings();
  void set_allocated_routing_settings(::tc_serialize::RoutingSettings* routing_settings);
  private:
  const ::tc_serialize::RoutingSettings& _internal_routing_settings() const;
  ::tc_serialize::RoutingSettings* _internal_mutable_routing_settings();
  public:
  void unsafe_arena_set_allocated_routing_settings(
      ::tc_serialize::RoutingSettings* routing_settings);
  ::tc_serialize::RoutingSettings* unsafe_arena_release_routing_settings();

  // .tc_serialize.RoutesInternalDataListsPB router_routes_int_data = 2;
  bool has_router_routes_int_data() const;
  private:
  bool _internal_has_router_routes_int_data() const;
  public:
  void clear_router_routes_int_data();
  const ::tc_serialize::RoutesInternalDataListsPB& router_routes_int_data() const;
  PROTOBUF_NODISCARD ::tc_serialize::RoutesInternalDataListsPB* release_router_routes_int_data();
  ::tc_serialize::RoutesInternalDataListsPB* mutable_router_routes_int_data();
  void set_allocated_router_routes_int_data(::tc_serialize::RoutesInternalDataListsPB* router_routes_int_data);
  private:
  const ::tc_serialize::RoutesInternalDataListsPB& _internal_router_routes_int_data() const;
  ::tc_serialize::RoutesInternalDataListsPB* _internal_mutable_router_routes_int_data();
  public:
  void unsafe_arena_set_allocated_router_routes_int_data(
      ::tc_serialize::RoutesInternalDataListsPB* router_routes_int_data);
  ::tc_serialize::RoutesInternalDataListsPB* unsafe_arena_release_router_routes_int_data();

  // .tc_serialize.TCGraphRouter tc_graph_router = 3;
  bool has_tc_graph_router() const;
  private:
  bool _internal_has_tc_graph_router() const;
  public:
  void clear_tc_graph_router();
  const ::tc_serialize::TCGraphRouter& tc_graph_router() const;
  PROTOBUF_NODISCARD ::tc_serialize::TCGraphRouter* release_tc_graph_router();
  ::tc_serialize::TCGraphRouter* mutable_tc_graph_router();
  void set_allocated_tc_graph_router(::tc_serialize::TCGraphRouter* tc_graph_router);
  private:
  const ::tc_serialize::TCGraphRouter& _internal_tc_graph_router() const;
  ::tc_serialize::TCGraphRouter* _internal_mutable_tc_graph_router();
  public:
  void unsafe_arena_set_allocated_tc_graph_router(
      ::tc_serialize::TCGraphRouter* tc_graph_router);
  ::tc_serialize::TCGraphRouter* unsafe_arena_release_tc_graph_router();

  // @@protoc_insertion_point(class_scope:tc_serialize.GraphRouterSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::tc_serialize::RoutingSettings* routing_settings_;
    ::tc_serialize::RoutesInternalDataListsPB* router_routes_int_data_;
    ::tc_serialize::TCGraphRouter* tc_graph_router_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5frouter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoutingSettings

// int64 bus_wait_time = 1;
inline void RoutingSettings::clear_bus_wait_time() {
  _impl_.bus_wait_time_ = int64_t{0};
}
inline int64_t RoutingSettings::_internal_bus_wait_time() const {
  return _impl_.bus_wait_time_;
}
inline int64_t RoutingSettings::bus_wait_time() const {
  // @@protoc_insertion_point(field_get:tc_serialize.RoutingSettings.bus_wait_time)
  return _internal_bus_wait_time();
}
inline void RoutingSettings::_internal_set_bus_wait_time(int64_t value) {
  
  _impl_.bus_wait_time_ = value;
}
inline void RoutingSettings::set_bus_wait_time(int64_t value) {
  _internal_set_bus_wait_time(value);
  // @@protoc_insertion_point(field_set:tc_serialize.RoutingSettings.bus_wait_time)
}

// double bus_velocity = 2;
inline void RoutingSettings::clear_bus_velocity() {
  _impl_.bus_velocity_ = 0;
}
inline double RoutingSettings::_internal_bus_velocity() const {
  return _impl_.bus_velocity_;
}
inline double RoutingSettings::bus_velocity() const {
  // @@protoc_insertion_point(field_get:tc_serialize.RoutingSettings.bus_velocity)
  return _internal_bus_velocity();
}
inline void RoutingSettings::_internal_set_bus_velocity(double value) {
  
  _impl_.bus_velocity_ = value;
}
inline void RoutingSettings::set_bus_velocity(double value) {
  _internal_set_bus_velocity(value);
  // @@protoc_insertion_point(field_set:tc_serialize.RoutingSettings.bus_velocity)
}

// -------------------------------------------------------------------

// StopOnRoutePB

// uint64 stop_number = 1;
inline void StopOnRoutePB::clear_stop_number() {
  _impl_.stop_number_ = uint64_t{0u};
}
inline uint64_t StopOnRoutePB::_internal_stop_number() const {
  return _impl_.stop_number_;
}
inline uint64_t StopOnRoutePB::stop_number() const {
  // @@protoc_insertion_point(field_get:tc_serialize.StopOnRoutePB.stop_number)
  return _internal_stop_number();
}
inline void StopOnRoutePB::_internal_set_stop_number(uint64_t value) {
  
  _impl_.stop_number_ = value;
}
inline void StopOnRoutePB::set_stop_number(uint64_t value) {
  _internal_set_stop_number(value);
  // @@protoc_insertion_point(field_set:tc_serialize.StopOnRoutePB.stop_number)
}

// uint32 stop_id = 2;
inline void StopOnRoutePB::clear_stop_id() {
  _impl_.stop_id_ = 0u;
}
inline uint32_t StopOnRoutePB::_internal_stop_id() const {
  return _impl_.stop_id_;
}
inline uint32_t StopOnRoutePB::stop_id() const {
  // @@protoc_insertion_point(field_get:tc_serialize.StopOnRoutePB.stop_id)
  return _internal_stop_id();
}
inline void StopOnRoutePB::_internal_set_stop_id(uint32_t value) {
  
  _impl_.stop_id_ = value;
}
inline void StopOnRoutePB::set_stop_id(uint32_t value) {
  _internal_set_stop_id(value);
  // @@protoc_insertion_point(field_set:tc_serialize.StopOnRoutePB.stop_id)
}

// string bus_name = 3;
inline void StopOnRoutePB::clear_bus_name() {
  _impl_.bus_name_.ClearToEmpty();
}
inline const std::string& StopOnRoutePB::bus_name() const {
  // @@protoc_insertion_point(field_get:tc_serialize.StopOnRoutePB.bus_name)
  return _internal_bus_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopOnRoutePB::set_bus_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bus_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tc_serialize.StopOnRoutePB.bus_name)
}
inline std::string* StopOnRoutePB::mutable_bus_name() {
  std::string* _s = _internal_mutable_bus_name();
  // @@protoc_insertion_point(field_mutable:tc_serialize.StopOnRoutePB.bus_name)
  return _s;
}
inline const std::string& StopOnRoutePB::_internal_bus_name() const {
  return _impl_.bus_name_.Get();
}
inline void StopOnRoutePB::_internal_set_bus_name(const std::string& value) {
  
  _impl_.bus_name_.Set(value, GetArenaForAllocation());
}
inline std::string* StopOnRoutePB::_internal_mutable_bus_name() {
  
  return _impl_.bus_name_.Mutable(GetArenaForAllocation());
}
inline std::string* StopOnRoutePB::release_bus_name() {
  // @@protoc_insertion_point(field_release:tc_serialize.StopOnRoutePB.bus_name)
  return _impl_.bus_name_.Release();
}
inline void StopOnRoutePB::set_allocated_bus_name(std::string* bus_name) {
  if (bus_name != nullptr) {
    
  } else {
    
  }
  _impl_.bus_name_.SetAllocated(bus_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bus_name_.IsDefault()) {
    _impl_.bus_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.StopOnRoutePB.bus_name)
}

// uint64 vertex_id = 4;
inline void StopOnRoutePB::clear_vertex_id() {
  _impl_.vertex_id_ = uint64_t{0u};
}
inline uint64_t StopOnRoutePB::_internal_vertex_id() const {
  return _impl_.vertex_id_;
}
inline uint64_t StopOnRoutePB::vertex_id() const {
  // @@protoc_insertion_point(field_get:tc_serialize.StopOnRoutePB.vertex_id)
  return _internal_vertex_id();
}
inline void StopOnRoutePB::_internal_set_vertex_id(uint64_t value) {
  
  _impl_.vertex_id_ = value;
}
inline void StopOnRoutePB::set_vertex_id(uint64_t value) {
  _internal_set_vertex_id(value);
  // @@protoc_insertion_point(field_set:tc_serialize.StopOnRoutePB.vertex_id)
}

// -------------------------------------------------------------------

// TwoStopsLinkPB

// string bus_name = 1;
inline void TwoStopsLinkPB::clear_bus_name() {
  _impl_.bus_name_.ClearToEmpty();
}
inline const std::string& TwoStopsLinkPB::bus_name() const {
  // @@protoc_insertion_point(field_get:tc_serialize.TwoStopsLinkPB.bus_name)
  return _internal_bus_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TwoStopsLinkPB::set_bus_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bus_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tc_serialize.TwoStopsLinkPB.bus_name)
}
inline std::string* TwoStopsLinkPB::mutable_bus_name() {
  std::string* _s = _internal_mutable_bus_name();
  // @@protoc_insertion_point(field_mutable:tc_serialize.TwoStopsLinkPB.bus_name)
  return _s;
}
inline const std::string& TwoStopsLinkPB::_internal_bus_name() const {
  return _impl_.bus_name_.Get();
}
inline void TwoStopsLinkPB::_internal_set_bus_name(const std::string& value) {
  
  _impl_.bus_name_.Set(value, GetArenaForAllocation());
}
inline std::string* TwoStopsLinkPB::_internal_mutable_bus_name() {
  
  return _impl_.bus_name_.Mutable(GetArenaForAllocation());
}
inline std::string* TwoStopsLinkPB::release_bus_name() {
  // @@protoc_insertion_point(field_release:tc_serialize.TwoStopsLinkPB.bus_name)
  return _impl_.bus_name_.Release();
}
inline void TwoStopsLinkPB::set_allocated_bus_name(std::string* bus_name) {
  if (bus_name != nullptr) {
    
  } else {
    
  }
  _impl_.bus_name_.SetAllocated(bus_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bus_name_.IsDefault()) {
    _impl_.bus_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.TwoStopsLinkPB.bus_name)
}

// uint64 stop_from = 2;
inline void TwoStopsLinkPB::clear_stop_from() {
  _impl_.stop_from_ = uint64_t{0u};
}
inline uint64_t TwoStopsLinkPB::_internal_stop_from() const {
  return _impl_.stop_from_;
}
inline uint64_t TwoStopsLinkPB::stop_from() const {
  // @@protoc_insertion_point(field_get:tc_serialize.TwoStopsLinkPB.stop_from)
  return _internal_stop_from();
}
inline void TwoStopsLinkPB::_internal_set_stop_from(uint64_t value) {
  
  _impl_.stop_from_ = value;
}
inline void TwoStopsLinkPB::set_stop_from(uint64_t value) {
  _internal_set_stop_from(value);
  // @@protoc_insertion_point(field_set:tc_serialize.TwoStopsLinkPB.stop_from)
}

// uint64 stop_to = 3;
inline void TwoStopsLinkPB::clear_stop_to() {
  _impl_.stop_to_ = uint64_t{0u};
}
inline uint64_t TwoStopsLinkPB::_internal_stop_to() const {
  return _impl_.stop_to_;
}
inline uint64_t TwoStopsLinkPB::stop_to() const {
  // @@protoc_insertion_point(field_get:tc_serialize.TwoStopsLinkPB.stop_to)
  return _internal_stop_to();
}
inline void TwoStopsLinkPB::_internal_set_stop_to(uint64_t value) {
  
  _impl_.stop_to_ = value;
}
inline void TwoStopsLinkPB::set_stop_to(uint64_t value) {
  _internal_set_stop_to(value);
  // @@protoc_insertion_point(field_set:tc_serialize.TwoStopsLinkPB.stop_to)
}

// uint64 num_of_stops = 4;
inline void TwoStopsLinkPB::clear_num_of_stops() {
  _impl_.num_of_stops_ = uint64_t{0u};
}
inline uint64_t TwoStopsLinkPB::_internal_num_of_stops() const {
  return _impl_.num_of_stops_;
}
inline uint64_t TwoStopsLinkPB::num_of_stops() const {
  // @@protoc_insertion_point(field_get:tc_serialize.TwoStopsLinkPB.num_of_stops)
  return _internal_num_of_stops();
}
inline void TwoStopsLinkPB::_internal_set_num_of_stops(uint64_t value) {
  
  _impl_.num_of_stops_ = value;
}
inline void TwoStopsLinkPB::set_num_of_stops(uint64_t value) {
  _internal_set_num_of_stops(value);
  // @@protoc_insertion_point(field_set:tc_serialize.TwoStopsLinkPB.num_of_stops)
}

// uint64 edge_id = 5;
inline void TwoStopsLinkPB::clear_edge_id() {
  _impl_.edge_id_ = uint64_t{0u};
}
inline uint64_t TwoStopsLinkPB::_internal_edge_id() const {
  return _impl_.edge_id_;
}
inline uint64_t TwoStopsLinkPB::edge_id() const {
  // @@protoc_insertion_point(field_get:tc_serialize.TwoStopsLinkPB.edge_id)
  return _internal_edge_id();
}
inline void TwoStopsLinkPB::_internal_set_edge_id(uint64_t value) {
  
  _impl_.edge_id_ = value;
}
inline void TwoStopsLinkPB::set_edge_id(uint64_t value) {
  _internal_set_edge_id(value);
  // @@protoc_insertion_point(field_set:tc_serialize.TwoStopsLinkPB.edge_id)
}

// -------------------------------------------------------------------

// EdgePB

// uint64 from = 1;
inline void EdgePB::clear_from() {
  _impl_.from_ = uint64_t{0u};
}
inline uint64_t EdgePB::_internal_from() const {
  return _impl_.from_;
}
inline uint64_t EdgePB::from() const {
  // @@protoc_insertion_point(field_get:tc_serialize.EdgePB.from)
  return _internal_from();
}
inline void EdgePB::_internal_set_from(uint64_t value) {
  
  _impl_.from_ = value;
}
inline void EdgePB::set_from(uint64_t value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:tc_serialize.EdgePB.from)
}

// uint64 to = 2;
inline void EdgePB::clear_to() {
  _impl_.to_ = uint64_t{0u};
}
inline uint64_t EdgePB::_internal_to() const {
  return _impl_.to_;
}
inline uint64_t EdgePB::to() const {
  // @@protoc_insertion_point(field_get:tc_serialize.EdgePB.to)
  return _internal_to();
}
inline void EdgePB::_internal_set_to(uint64_t value) {
  
  _impl_.to_ = value;
}
inline void EdgePB::set_to(uint64_t value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:tc_serialize.EdgePB.to)
}

// double weight = 3;
inline void EdgePB::clear_weight() {
  _impl_.weight_ = 0;
}
inline double EdgePB::_internal_weight() const {
  return _impl_.weight_;
}
inline double EdgePB::weight() const {
  // @@protoc_insertion_point(field_get:tc_serialize.EdgePB.weight)
  return _internal_weight();
}
inline void EdgePB::_internal_set_weight(double value) {
  
  _impl_.weight_ = value;
}
inline void EdgePB::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:tc_serialize.EdgePB.weight)
}

// -------------------------------------------------------------------

// EdgeVectorPB

// repeated .tc_serialize.EdgePB edges = 1;
inline int EdgeVectorPB::_internal_edges_size() const {
  return _impl_.edges_.size();
}
inline int EdgeVectorPB::edges_size() const {
  return _internal_edges_size();
}
inline void EdgeVectorPB::clear_edges() {
  _impl_.edges_.Clear();
}
inline ::tc_serialize::EdgePB* EdgeVectorPB::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:tc_serialize.EdgeVectorPB.edges)
  return _impl_.edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::EdgePB >*
EdgeVectorPB::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:tc_serialize.EdgeVectorPB.edges)
  return &_impl_.edges_;
}
inline const ::tc_serialize::EdgePB& EdgeVectorPB::_internal_edges(int index) const {
  return _impl_.edges_.Get(index);
}
inline const ::tc_serialize::EdgePB& EdgeVectorPB::edges(int index) const {
  // @@protoc_insertion_point(field_get:tc_serialize.EdgeVectorPB.edges)
  return _internal_edges(index);
}
inline ::tc_serialize::EdgePB* EdgeVectorPB::_internal_add_edges() {
  return _impl_.edges_.Add();
}
inline ::tc_serialize::EdgePB* EdgeVectorPB::add_edges() {
  ::tc_serialize::EdgePB* _add = _internal_add_edges();
  // @@protoc_insertion_point(field_add:tc_serialize.EdgeVectorPB.edges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::EdgePB >&
EdgeVectorPB::edges() const {
  // @@protoc_insertion_point(field_list:tc_serialize.EdgeVectorPB.edges)
  return _impl_.edges_;
}

// -------------------------------------------------------------------

// IncListPB

// repeated uint64 list = 1;
inline int IncListPB::_internal_list_size() const {
  return _impl_.list_.size();
}
inline int IncListPB::list_size() const {
  return _internal_list_size();
}
inline void IncListPB::clear_list() {
  _impl_.list_.Clear();
}
inline uint64_t IncListPB::_internal_list(int index) const {
  return _impl_.list_.Get(index);
}
inline uint64_t IncListPB::list(int index) const {
  // @@protoc_insertion_point(field_get:tc_serialize.IncListPB.list)
  return _internal_list(index);
}
inline void IncListPB::set_list(int index, uint64_t value) {
  _impl_.list_.Set(index, value);
  // @@protoc_insertion_point(field_set:tc_serialize.IncListPB.list)
}
inline void IncListPB::_internal_add_list(uint64_t value) {
  _impl_.list_.Add(value);
}
inline void IncListPB::add_list(uint64_t value) {
  _internal_add_list(value);
  // @@protoc_insertion_point(field_add:tc_serialize.IncListPB.list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
IncListPB::_internal_list() const {
  return _impl_.list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
IncListPB::list() const {
  // @@protoc_insertion_point(field_list:tc_serialize.IncListPB.list)
  return _internal_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
IncListPB::_internal_mutable_list() {
  return &_impl_.list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
IncListPB::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:tc_serialize.IncListPB.list)
  return _internal_mutable_list();
}

// -------------------------------------------------------------------

// IncidenceListPB

// repeated .tc_serialize.IncListPB lists = 1;
inline int IncidenceListPB::_internal_lists_size() const {
  return _impl_.lists_.size();
}
inline int IncidenceListPB::lists_size() const {
  return _internal_lists_size();
}
inline void IncidenceListPB::clear_lists() {
  _impl_.lists_.Clear();
}
inline ::tc_serialize::IncListPB* IncidenceListPB::mutable_lists(int index) {
  // @@protoc_insertion_point(field_mutable:tc_serialize.IncidenceListPB.lists)
  return _impl_.lists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::IncListPB >*
IncidenceListPB::mutable_lists() {
  // @@protoc_insertion_point(field_mutable_list:tc_serialize.IncidenceListPB.lists)
  return &_impl_.lists_;
}
inline const ::tc_serialize::IncListPB& IncidenceListPB::_internal_lists(int index) const {
  return _impl_.lists_.Get(index);
}
inline const ::tc_serialize::IncListPB& IncidenceListPB::lists(int index) const {
  // @@protoc_insertion_point(field_get:tc_serialize.IncidenceListPB.lists)
  return _internal_lists(index);
}
inline ::tc_serialize::IncListPB* IncidenceListPB::_internal_add_lists() {
  return _impl_.lists_.Add();
}
inline ::tc_serialize::IncListPB* IncidenceListPB::add_lists() {
  ::tc_serialize::IncListPB* _add = _internal_add_lists();
  // @@protoc_insertion_point(field_add:tc_serialize.IncidenceListPB.lists)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::IncListPB >&
IncidenceListPB::lists() const {
  // @@protoc_insertion_point(field_list:tc_serialize.IncidenceListPB.lists)
  return _impl_.lists_;
}

// -------------------------------------------------------------------

// TCGraphRouter

// repeated .tc_serialize.StopOnRoutePB tc_router_stops_ = 1;
inline int TCGraphRouter::_internal_tc_router_stops__size() const {
  return _impl_.tc_router_stops__.size();
}
inline int TCGraphRouter::tc_router_stops__size() const {
  return _internal_tc_router_stops__size();
}
inline void TCGraphRouter::clear_tc_router_stops_() {
  _impl_.tc_router_stops__.Clear();
}
inline ::tc_serialize::StopOnRoutePB* TCGraphRouter::mutable_tc_router_stops_(int index) {
  // @@protoc_insertion_point(field_mutable:tc_serialize.TCGraphRouter.tc_router_stops_)
  return _impl_.tc_router_stops__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::StopOnRoutePB >*
TCGraphRouter::mutable_tc_router_stops_() {
  // @@protoc_insertion_point(field_mutable_list:tc_serialize.TCGraphRouter.tc_router_stops_)
  return &_impl_.tc_router_stops__;
}
inline const ::tc_serialize::StopOnRoutePB& TCGraphRouter::_internal_tc_router_stops_(int index) const {
  return _impl_.tc_router_stops__.Get(index);
}
inline const ::tc_serialize::StopOnRoutePB& TCGraphRouter::tc_router_stops_(int index) const {
  // @@protoc_insertion_point(field_get:tc_serialize.TCGraphRouter.tc_router_stops_)
  return _internal_tc_router_stops_(index);
}
inline ::tc_serialize::StopOnRoutePB* TCGraphRouter::_internal_add_tc_router_stops_() {
  return _impl_.tc_router_stops__.Add();
}
inline ::tc_serialize::StopOnRoutePB* TCGraphRouter::add_tc_router_stops_() {
  ::tc_serialize::StopOnRoutePB* _add = _internal_add_tc_router_stops_();
  // @@protoc_insertion_point(field_add:tc_serialize.TCGraphRouter.tc_router_stops_)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::StopOnRoutePB >&
TCGraphRouter::tc_router_stops_() const {
  // @@protoc_insertion_point(field_list:tc_serialize.TCGraphRouter.tc_router_stops_)
  return _impl_.tc_router_stops__;
}

// repeated .tc_serialize.TwoStopsLinkPB tc_router_links = 2;
inline int TCGraphRouter::_internal_tc_router_links_size() const {
  return _impl_.tc_router_links_.size();
}
inline int TCGraphRouter::tc_router_links_size() const {
  return _internal_tc_router_links_size();
}
inline void TCGraphRouter::clear_tc_router_links() {
  _impl_.tc_router_links_.Clear();
}
inline ::tc_serialize::TwoStopsLinkPB* TCGraphRouter::mutable_tc_router_links(int index) {
  // @@protoc_insertion_point(field_mutable:tc_serialize.TCGraphRouter.tc_router_links)
  return _impl_.tc_router_links_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::TwoStopsLinkPB >*
TCGraphRouter::mutable_tc_router_links() {
  // @@protoc_insertion_point(field_mutable_list:tc_serialize.TCGraphRouter.tc_router_links)
  return &_impl_.tc_router_links_;
}
inline const ::tc_serialize::TwoStopsLinkPB& TCGraphRouter::_internal_tc_router_links(int index) const {
  return _impl_.tc_router_links_.Get(index);
}
inline const ::tc_serialize::TwoStopsLinkPB& TCGraphRouter::tc_router_links(int index) const {
  // @@protoc_insertion_point(field_get:tc_serialize.TCGraphRouter.tc_router_links)
  return _internal_tc_router_links(index);
}
inline ::tc_serialize::TwoStopsLinkPB* TCGraphRouter::_internal_add_tc_router_links() {
  return _impl_.tc_router_links_.Add();
}
inline ::tc_serialize::TwoStopsLinkPB* TCGraphRouter::add_tc_router_links() {
  ::tc_serialize::TwoStopsLinkPB* _add = _internal_add_tc_router_links();
  // @@protoc_insertion_point(field_add:tc_serialize.TCGraphRouter.tc_router_links)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::TwoStopsLinkPB >&
TCGraphRouter::tc_router_links() const {
  // @@protoc_insertion_point(field_list:tc_serialize.TCGraphRouter.tc_router_links)
  return _impl_.tc_router_links_;
}

// uint64 edge_count = 3;
inline void TCGraphRouter::clear_edge_count() {
  _impl_.edge_count_ = uint64_t{0u};
}
inline uint64_t TCGraphRouter::_internal_edge_count() const {
  return _impl_.edge_count_;
}
inline uint64_t TCGraphRouter::edge_count() const {
  // @@protoc_insertion_point(field_get:tc_serialize.TCGraphRouter.edge_count)
  return _internal_edge_count();
}
inline void TCGraphRouter::_internal_set_edge_count(uint64_t value) {
  
  _impl_.edge_count_ = value;
}
inline void TCGraphRouter::set_edge_count(uint64_t value) {
  _internal_set_edge_count(value);
  // @@protoc_insertion_point(field_set:tc_serialize.TCGraphRouter.edge_count)
}

// uint64 vertex_id_count = 4;
inline void TCGraphRouter::clear_vertex_id_count() {
  _impl_.vertex_id_count_ = uint64_t{0u};
}
inline uint64_t TCGraphRouter::_internal_vertex_id_count() const {
  return _impl_.vertex_id_count_;
}
inline uint64_t TCGraphRouter::vertex_id_count() const {
  // @@protoc_insertion_point(field_get:tc_serialize.TCGraphRouter.vertex_id_count)
  return _internal_vertex_id_count();
}
inline void TCGraphRouter::_internal_set_vertex_id_count(uint64_t value) {
  
  _impl_.vertex_id_count_ = value;
}
inline void TCGraphRouter::set_vertex_id_count(uint64_t value) {
  _internal_set_vertex_id_count(value);
  // @@protoc_insertion_point(field_set:tc_serialize.TCGraphRouter.vertex_id_count)
}

// .tc_serialize.EdgeVectorPB graph_edges = 5;
inline bool TCGraphRouter::_internal_has_graph_edges() const {
  return this != internal_default_instance() && _impl_.graph_edges_ != nullptr;
}
inline bool TCGraphRouter::has_graph_edges() const {
  return _internal_has_graph_edges();
}
inline void TCGraphRouter::clear_graph_edges() {
  if (GetArenaForAllocation() == nullptr && _impl_.graph_edges_ != nullptr) {
    delete _impl_.graph_edges_;
  }
  _impl_.graph_edges_ = nullptr;
}
inline const ::tc_serialize::EdgeVectorPB& TCGraphRouter::_internal_graph_edges() const {
  const ::tc_serialize::EdgeVectorPB* p = _impl_.graph_edges_;
  return p != nullptr ? *p : reinterpret_cast<const ::tc_serialize::EdgeVectorPB&>(
      ::tc_serialize::_EdgeVectorPB_default_instance_);
}
inline const ::tc_serialize::EdgeVectorPB& TCGraphRouter::graph_edges() const {
  // @@protoc_insertion_point(field_get:tc_serialize.TCGraphRouter.graph_edges)
  return _internal_graph_edges();
}
inline void TCGraphRouter::unsafe_arena_set_allocated_graph_edges(
    ::tc_serialize::EdgeVectorPB* graph_edges) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_edges_);
  }
  _impl_.graph_edges_ = graph_edges;
  if (graph_edges) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tc_serialize.TCGraphRouter.graph_edges)
}
inline ::tc_serialize::EdgeVectorPB* TCGraphRouter::release_graph_edges() {
  
  ::tc_serialize::EdgeVectorPB* temp = _impl_.graph_edges_;
  _impl_.graph_edges_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tc_serialize::EdgeVectorPB* TCGraphRouter::unsafe_arena_release_graph_edges() {
  // @@protoc_insertion_point(field_release:tc_serialize.TCGraphRouter.graph_edges)
  
  ::tc_serialize::EdgeVectorPB* temp = _impl_.graph_edges_;
  _impl_.graph_edges_ = nullptr;
  return temp;
}
inline ::tc_serialize::EdgeVectorPB* TCGraphRouter::_internal_mutable_graph_edges() {
  
  if (_impl_.graph_edges_ == nullptr) {
    auto* p = CreateMaybeMessage<::tc_serialize::EdgeVectorPB>(GetArenaForAllocation());
    _impl_.graph_edges_ = p;
  }
  return _impl_.graph_edges_;
}
inline ::tc_serialize::EdgeVectorPB* TCGraphRouter::mutable_graph_edges() {
  ::tc_serialize::EdgeVectorPB* _msg = _internal_mutable_graph_edges();
  // @@protoc_insertion_point(field_mutable:tc_serialize.TCGraphRouter.graph_edges)
  return _msg;
}
inline void TCGraphRouter::set_allocated_graph_edges(::tc_serialize::EdgeVectorPB* graph_edges) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.graph_edges_;
  }
  if (graph_edges) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(graph_edges);
    if (message_arena != submessage_arena) {
      graph_edges = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph_edges, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.graph_edges_ = graph_edges;
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.TCGraphRouter.graph_edges)
}

// .tc_serialize.IncidenceListPB graph_incidence_list = 6;
inline bool TCGraphRouter::_internal_has_graph_incidence_list() const {
  return this != internal_default_instance() && _impl_.graph_incidence_list_ != nullptr;
}
inline bool TCGraphRouter::has_graph_incidence_list() const {
  return _internal_has_graph_incidence_list();
}
inline void TCGraphRouter::clear_graph_incidence_list() {
  if (GetArenaForAllocation() == nullptr && _impl_.graph_incidence_list_ != nullptr) {
    delete _impl_.graph_incidence_list_;
  }
  _impl_.graph_incidence_list_ = nullptr;
}
inline const ::tc_serialize::IncidenceListPB& TCGraphRouter::_internal_graph_incidence_list() const {
  const ::tc_serialize::IncidenceListPB* p = _impl_.graph_incidence_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::tc_serialize::IncidenceListPB&>(
      ::tc_serialize::_IncidenceListPB_default_instance_);
}
inline const ::tc_serialize::IncidenceListPB& TCGraphRouter::graph_incidence_list() const {
  // @@protoc_insertion_point(field_get:tc_serialize.TCGraphRouter.graph_incidence_list)
  return _internal_graph_incidence_list();
}
inline void TCGraphRouter::unsafe_arena_set_allocated_graph_incidence_list(
    ::tc_serialize::IncidenceListPB* graph_incidence_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.graph_incidence_list_);
  }
  _impl_.graph_incidence_list_ = graph_incidence_list;
  if (graph_incidence_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tc_serialize.TCGraphRouter.graph_incidence_list)
}
inline ::tc_serialize::IncidenceListPB* TCGraphRouter::release_graph_incidence_list() {
  
  ::tc_serialize::IncidenceListPB* temp = _impl_.graph_incidence_list_;
  _impl_.graph_incidence_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tc_serialize::IncidenceListPB* TCGraphRouter::unsafe_arena_release_graph_incidence_list() {
  // @@protoc_insertion_point(field_release:tc_serialize.TCGraphRouter.graph_incidence_list)
  
  ::tc_serialize::IncidenceListPB* temp = _impl_.graph_incidence_list_;
  _impl_.graph_incidence_list_ = nullptr;
  return temp;
}
inline ::tc_serialize::IncidenceListPB* TCGraphRouter::_internal_mutable_graph_incidence_list() {
  
  if (_impl_.graph_incidence_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::tc_serialize::IncidenceListPB>(GetArenaForAllocation());
    _impl_.graph_incidence_list_ = p;
  }
  return _impl_.graph_incidence_list_;
}
inline ::tc_serialize::IncidenceListPB* TCGraphRouter::mutable_graph_incidence_list() {
  ::tc_serialize::IncidenceListPB* _msg = _internal_mutable_graph_incidence_list();
  // @@protoc_insertion_point(field_mutable:tc_serialize.TCGraphRouter.graph_incidence_list)
  return _msg;
}
inline void TCGraphRouter::set_allocated_graph_incidence_list(::tc_serialize::IncidenceListPB* graph_incidence_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.graph_incidence_list_;
  }
  if (graph_incidence_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(graph_incidence_list);
    if (message_arena != submessage_arena) {
      graph_incidence_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph_incidence_list, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.graph_incidence_list_ = graph_incidence_list;
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.TCGraphRouter.graph_incidence_list)
}

// -------------------------------------------------------------------

// RouteIntDataPB

// double weight = 1;
inline void RouteIntDataPB::clear_weight() {
  _impl_.weight_ = 0;
}
inline double RouteIntDataPB::_internal_weight() const {
  return _impl_.weight_;
}
inline double RouteIntDataPB::weight() const {
  // @@protoc_insertion_point(field_get:tc_serialize.RouteIntDataPB.weight)
  return _internal_weight();
}
inline void RouteIntDataPB::_internal_set_weight(double value) {
  
  _impl_.weight_ = value;
}
inline void RouteIntDataPB::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:tc_serialize.RouteIntDataPB.weight)
}

// uint64 prev_edge = 2;
inline void RouteIntDataPB::clear_prev_edge() {
  _impl_.prev_edge_ = uint64_t{0u};
}
inline uint64_t RouteIntDataPB::_internal_prev_edge() const {
  return _impl_.prev_edge_;
}
inline uint64_t RouteIntDataPB::prev_edge() const {
  // @@protoc_insertion_point(field_get:tc_serialize.RouteIntDataPB.prev_edge)
  return _internal_prev_edge();
}
inline void RouteIntDataPB::_internal_set_prev_edge(uint64_t value) {
  
  _impl_.prev_edge_ = value;
}
inline void RouteIntDataPB::set_prev_edge(uint64_t value) {
  _internal_set_prev_edge(value);
  // @@protoc_insertion_point(field_set:tc_serialize.RouteIntDataPB.prev_edge)
}

// bool prev_edge_empty = 3;
inline void RouteIntDataPB::clear_prev_edge_empty() {
  _impl_.prev_edge_empty_ = false;
}
inline bool RouteIntDataPB::_internal_prev_edge_empty() const {
  return _impl_.prev_edge_empty_;
}
inline bool RouteIntDataPB::prev_edge_empty() const {
  // @@protoc_insertion_point(field_get:tc_serialize.RouteIntDataPB.prev_edge_empty)
  return _internal_prev_edge_empty();
}
inline void RouteIntDataPB::_internal_set_prev_edge_empty(bool value) {
  
  _impl_.prev_edge_empty_ = value;
}
inline void RouteIntDataPB::set_prev_edge_empty(bool value) {
  _internal_set_prev_edge_empty(value);
  // @@protoc_insertion_point(field_set:tc_serialize.RouteIntDataPB.prev_edge_empty)
}

// bool data_empty = 4;
inline void RouteIntDataPB::clear_data_empty() {
  _impl_.data_empty_ = false;
}
inline bool RouteIntDataPB::_internal_data_empty() const {
  return _impl_.data_empty_;
}
inline bool RouteIntDataPB::data_empty() const {
  // @@protoc_insertion_point(field_get:tc_serialize.RouteIntDataPB.data_empty)
  return _internal_data_empty();
}
inline void RouteIntDataPB::_internal_set_data_empty(bool value) {
  
  _impl_.data_empty_ = value;
}
inline void RouteIntDataPB::set_data_empty(bool value) {
  _internal_set_data_empty(value);
  // @@protoc_insertion_point(field_set:tc_serialize.RouteIntDataPB.data_empty)
}

// -------------------------------------------------------------------

// VertexCountListPB

// repeated .tc_serialize.RouteIntDataPB vertex_list = 1;
inline int VertexCountListPB::_internal_vertex_list_size() const {
  return _impl_.vertex_list_.size();
}
inline int VertexCountListPB::vertex_list_size() const {
  return _internal_vertex_list_size();
}
inline void VertexCountListPB::clear_vertex_list() {
  _impl_.vertex_list_.Clear();
}
inline ::tc_serialize::RouteIntDataPB* VertexCountListPB::mutable_vertex_list(int index) {
  // @@protoc_insertion_point(field_mutable:tc_serialize.VertexCountListPB.vertex_list)
  return _impl_.vertex_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::RouteIntDataPB >*
VertexCountListPB::mutable_vertex_list() {
  // @@protoc_insertion_point(field_mutable_list:tc_serialize.VertexCountListPB.vertex_list)
  return &_impl_.vertex_list_;
}
inline const ::tc_serialize::RouteIntDataPB& VertexCountListPB::_internal_vertex_list(int index) const {
  return _impl_.vertex_list_.Get(index);
}
inline const ::tc_serialize::RouteIntDataPB& VertexCountListPB::vertex_list(int index) const {
  // @@protoc_insertion_point(field_get:tc_serialize.VertexCountListPB.vertex_list)
  return _internal_vertex_list(index);
}
inline ::tc_serialize::RouteIntDataPB* VertexCountListPB::_internal_add_vertex_list() {
  return _impl_.vertex_list_.Add();
}
inline ::tc_serialize::RouteIntDataPB* VertexCountListPB::add_vertex_list() {
  ::tc_serialize::RouteIntDataPB* _add = _internal_add_vertex_list();
  // @@protoc_insertion_point(field_add:tc_serialize.VertexCountListPB.vertex_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::RouteIntDataPB >&
VertexCountListPB::vertex_list() const {
  // @@protoc_insertion_point(field_list:tc_serialize.VertexCountListPB.vertex_list)
  return _impl_.vertex_list_;
}

// -------------------------------------------------------------------

// RoutesInternalDataListsPB

// repeated .tc_serialize.VertexCountListPB routes_list = 1;
inline int RoutesInternalDataListsPB::_internal_routes_list_size() const {
  return _impl_.routes_list_.size();
}
inline int RoutesInternalDataListsPB::routes_list_size() const {
  return _internal_routes_list_size();
}
inline void RoutesInternalDataListsPB::clear_routes_list() {
  _impl_.routes_list_.Clear();
}
inline ::tc_serialize::VertexCountListPB* RoutesInternalDataListsPB::mutable_routes_list(int index) {
  // @@protoc_insertion_point(field_mutable:tc_serialize.RoutesInternalDataListsPB.routes_list)
  return _impl_.routes_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::VertexCountListPB >*
RoutesInternalDataListsPB::mutable_routes_list() {
  // @@protoc_insertion_point(field_mutable_list:tc_serialize.RoutesInternalDataListsPB.routes_list)
  return &_impl_.routes_list_;
}
inline const ::tc_serialize::VertexCountListPB& RoutesInternalDataListsPB::_internal_routes_list(int index) const {
  return _impl_.routes_list_.Get(index);
}
inline const ::tc_serialize::VertexCountListPB& RoutesInternalDataListsPB::routes_list(int index) const {
  // @@protoc_insertion_point(field_get:tc_serialize.RoutesInternalDataListsPB.routes_list)
  return _internal_routes_list(index);
}
inline ::tc_serialize::VertexCountListPB* RoutesInternalDataListsPB::_internal_add_routes_list() {
  return _impl_.routes_list_.Add();
}
inline ::tc_serialize::VertexCountListPB* RoutesInternalDataListsPB::add_routes_list() {
  ::tc_serialize::VertexCountListPB* _add = _internal_add_routes_list();
  // @@protoc_insertion_point(field_add:tc_serialize.RoutesInternalDataListsPB.routes_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tc_serialize::VertexCountListPB >&
RoutesInternalDataListsPB::routes_list() const {
  // @@protoc_insertion_point(field_list:tc_serialize.RoutesInternalDataListsPB.routes_list)
  return _impl_.routes_list_;
}

// -------------------------------------------------------------------

// GraphRouterSettings

// .tc_serialize.RoutingSettings routing_settings = 1;
inline bool GraphRouterSettings::_internal_has_routing_settings() const {
  return this != internal_default_instance() && _impl_.routing_settings_ != nullptr;
}
inline bool GraphRouterSettings::has_routing_settings() const {
  return _internal_has_routing_settings();
}
inline void GraphRouterSettings::clear_routing_settings() {
  if (GetArenaForAllocation() == nullptr && _impl_.routing_settings_ != nullptr) {
    delete _impl_.routing_settings_;
  }
  _impl_.routing_settings_ = nullptr;
}
inline const ::tc_serialize::RoutingSettings& GraphRouterSettings::_internal_routing_settings() const {
  const ::tc_serialize::RoutingSettings* p = _impl_.routing_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::tc_serialize::RoutingSettings&>(
      ::tc_serialize::_RoutingSettings_default_instance_);
}
inline const ::tc_serialize::RoutingSettings& GraphRouterSettings::routing_settings() const {
  // @@protoc_insertion_point(field_get:tc_serialize.GraphRouterSettings.routing_settings)
  return _internal_routing_settings();
}
inline void GraphRouterSettings::unsafe_arena_set_allocated_routing_settings(
    ::tc_serialize::RoutingSettings* routing_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_settings_);
  }
  _impl_.routing_settings_ = routing_settings;
  if (routing_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tc_serialize.GraphRouterSettings.routing_settings)
}
inline ::tc_serialize::RoutingSettings* GraphRouterSettings::release_routing_settings() {
  
  ::tc_serialize::RoutingSettings* temp = _impl_.routing_settings_;
  _impl_.routing_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tc_serialize::RoutingSettings* GraphRouterSettings::unsafe_arena_release_routing_settings() {
  // @@protoc_insertion_point(field_release:tc_serialize.GraphRouterSettings.routing_settings)
  
  ::tc_serialize::RoutingSettings* temp = _impl_.routing_settings_;
  _impl_.routing_settings_ = nullptr;
  return temp;
}
inline ::tc_serialize::RoutingSettings* GraphRouterSettings::_internal_mutable_routing_settings() {
  
  if (_impl_.routing_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::tc_serialize::RoutingSettings>(GetArenaForAllocation());
    _impl_.routing_settings_ = p;
  }
  return _impl_.routing_settings_;
}
inline ::tc_serialize::RoutingSettings* GraphRouterSettings::mutable_routing_settings() {
  ::tc_serialize::RoutingSettings* _msg = _internal_mutable_routing_settings();
  // @@protoc_insertion_point(field_mutable:tc_serialize.GraphRouterSettings.routing_settings)
  return _msg;
}
inline void GraphRouterSettings::set_allocated_routing_settings(::tc_serialize::RoutingSettings* routing_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.routing_settings_;
  }
  if (routing_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(routing_settings);
    if (message_arena != submessage_arena) {
      routing_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.routing_settings_ = routing_settings;
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.GraphRouterSettings.routing_settings)
}

// .tc_serialize.RoutesInternalDataListsPB router_routes_int_data = 2;
inline bool GraphRouterSettings::_internal_has_router_routes_int_data() const {
  return this != internal_default_instance() && _impl_.router_routes_int_data_ != nullptr;
}
inline bool GraphRouterSettings::has_router_routes_int_data() const {
  return _internal_has_router_routes_int_data();
}
inline void GraphRouterSettings::clear_router_routes_int_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.router_routes_int_data_ != nullptr) {
    delete _impl_.router_routes_int_data_;
  }
  _impl_.router_routes_int_data_ = nullptr;
}
inline const ::tc_serialize::RoutesInternalDataListsPB& GraphRouterSettings::_internal_router_routes_int_data() const {
  const ::tc_serialize::RoutesInternalDataListsPB* p = _impl_.router_routes_int_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::tc_serialize::RoutesInternalDataListsPB&>(
      ::tc_serialize::_RoutesInternalDataListsPB_default_instance_);
}
inline const ::tc_serialize::RoutesInternalDataListsPB& GraphRouterSettings::router_routes_int_data() const {
  // @@protoc_insertion_point(field_get:tc_serialize.GraphRouterSettings.router_routes_int_data)
  return _internal_router_routes_int_data();
}
inline void GraphRouterSettings::unsafe_arena_set_allocated_router_routes_int_data(
    ::tc_serialize::RoutesInternalDataListsPB* router_routes_int_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.router_routes_int_data_);
  }
  _impl_.router_routes_int_data_ = router_routes_int_data;
  if (router_routes_int_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tc_serialize.GraphRouterSettings.router_routes_int_data)
}
inline ::tc_serialize::RoutesInternalDataListsPB* GraphRouterSettings::release_router_routes_int_data() {
  
  ::tc_serialize::RoutesInternalDataListsPB* temp = _impl_.router_routes_int_data_;
  _impl_.router_routes_int_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tc_serialize::RoutesInternalDataListsPB* GraphRouterSettings::unsafe_arena_release_router_routes_int_data() {
  // @@protoc_insertion_point(field_release:tc_serialize.GraphRouterSettings.router_routes_int_data)
  
  ::tc_serialize::RoutesInternalDataListsPB* temp = _impl_.router_routes_int_data_;
  _impl_.router_routes_int_data_ = nullptr;
  return temp;
}
inline ::tc_serialize::RoutesInternalDataListsPB* GraphRouterSettings::_internal_mutable_router_routes_int_data() {
  
  if (_impl_.router_routes_int_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::tc_serialize::RoutesInternalDataListsPB>(GetArenaForAllocation());
    _impl_.router_routes_int_data_ = p;
  }
  return _impl_.router_routes_int_data_;
}
inline ::tc_serialize::RoutesInternalDataListsPB* GraphRouterSettings::mutable_router_routes_int_data() {
  ::tc_serialize::RoutesInternalDataListsPB* _msg = _internal_mutable_router_routes_int_data();
  // @@protoc_insertion_point(field_mutable:tc_serialize.GraphRouterSettings.router_routes_int_data)
  return _msg;
}
inline void GraphRouterSettings::set_allocated_router_routes_int_data(::tc_serialize::RoutesInternalDataListsPB* router_routes_int_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.router_routes_int_data_;
  }
  if (router_routes_int_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(router_routes_int_data);
    if (message_arena != submessage_arena) {
      router_routes_int_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router_routes_int_data, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.router_routes_int_data_ = router_routes_int_data;
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.GraphRouterSettings.router_routes_int_data)
}

// .tc_serialize.TCGraphRouter tc_graph_router = 3;
inline bool GraphRouterSettings::_internal_has_tc_graph_router() const {
  return this != internal_default_instance() && _impl_.tc_graph_router_ != nullptr;
}
inline bool GraphRouterSettings::has_tc_graph_router() const {
  return _internal_has_tc_graph_router();
}
inline void GraphRouterSettings::clear_tc_graph_router() {
  if (GetArenaForAllocation() == nullptr && _impl_.tc_graph_router_ != nullptr) {
    delete _impl_.tc_graph_router_;
  }
  _impl_.tc_graph_router_ = nullptr;
}
inline const ::tc_serialize::TCGraphRouter& GraphRouterSettings::_internal_tc_graph_router() const {
  const ::tc_serialize::TCGraphRouter* p = _impl_.tc_graph_router_;
  return p != nullptr ? *p : reinterpret_cast<const ::tc_serialize::TCGraphRouter&>(
      ::tc_serialize::_TCGraphRouter_default_instance_);
}
inline const ::tc_serialize::TCGraphRouter& GraphRouterSettings::tc_graph_router() const {
  // @@protoc_insertion_point(field_get:tc_serialize.GraphRouterSettings.tc_graph_router)
  return _internal_tc_graph_router();
}
inline void GraphRouterSettings::unsafe_arena_set_allocated_tc_graph_router(
    ::tc_serialize::TCGraphRouter* tc_graph_router) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tc_graph_router_);
  }
  _impl_.tc_graph_router_ = tc_graph_router;
  if (tc_graph_router) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tc_serialize.GraphRouterSettings.tc_graph_router)
}
inline ::tc_serialize::TCGraphRouter* GraphRouterSettings::release_tc_graph_router() {
  
  ::tc_serialize::TCGraphRouter* temp = _impl_.tc_graph_router_;
  _impl_.tc_graph_router_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tc_serialize::TCGraphRouter* GraphRouterSettings::unsafe_arena_release_tc_graph_router() {
  // @@protoc_insertion_point(field_release:tc_serialize.GraphRouterSettings.tc_graph_router)
  
  ::tc_serialize::TCGraphRouter* temp = _impl_.tc_graph_router_;
  _impl_.tc_graph_router_ = nullptr;
  return temp;
}
inline ::tc_serialize::TCGraphRouter* GraphRouterSettings::_internal_mutable_tc_graph_router() {
  
  if (_impl_.tc_graph_router_ == nullptr) {
    auto* p = CreateMaybeMessage<::tc_serialize::TCGraphRouter>(GetArenaForAllocation());
    _impl_.tc_graph_router_ = p;
  }
  return _impl_.tc_graph_router_;
}
inline ::tc_serialize::TCGraphRouter* GraphRouterSettings::mutable_tc_graph_router() {
  ::tc_serialize::TCGraphRouter* _msg = _internal_mutable_tc_graph_router();
  // @@protoc_insertion_point(field_mutable:tc_serialize.GraphRouterSettings.tc_graph_router)
  return _msg;
}
inline void GraphRouterSettings::set_allocated_tc_graph_router(::tc_serialize::TCGraphRouter* tc_graph_router) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.tc_graph_router_;
  }
  if (tc_graph_router) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tc_graph_router);
    if (message_arena != submessage_arena) {
      tc_graph_router = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tc_graph_router, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.tc_graph_router_ = tc_graph_router;
  // @@protoc_insertion_point(field_set_allocated:tc_serialize.GraphRouterSettings.tc_graph_router)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tc_serialize

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5frouter_2eproto
